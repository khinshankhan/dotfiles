#+TITLE: An Emacs Configuration
#+AUTHOR: Khinshan Khan
#+STARTUP: overview

* Preface

* Tricks n Gimmicks for Sweeter Configuration

Mostly just useful variables and functions.

** General Functions

Personal functions, some packages are reliant on these, so it goes on top. Working on credit for people not mentioned in preface and significant enough. Functions are split into... "sensible" groups. Group splits for credits may be common, should still be treated as one group.

#+BEGIN_SRC emacs-lisp
(defun shan/do-nothing ()
  "Do nothing."
  (interactive)
  nil)

(defun shan/before (to-call-before f)
  "Run TO-CALL-BEFORE then run F."
  (funcall to-call-before)
  (funcall f))

(defun shan/after (to-call-after f)
  "Run F then run TO-CALL-AFTER."
  (funcall f)
  (funcall to-call-after))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun shan/split-window-right ()
  "Create a new window split to the right and balance the windows."
  (interactive)
  (shan/after #'balance-windows #'split-window-right))

(defun shan/split-window-below ()
  "Create a new window split below and balance the windows."
  (interactive)
  (shan/after #'balance-windows #'split-window-below))

(defun shan/delete-window ()
  "Delete the current window and balance the windows."
  (interactive)
  (shan/after #'balance-windows #'delete-window))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun shan/delete-buffer ()
  "Delete the current buffer and go to next most recent buffer."
  (interactive)
  (ido-kill-buffer))

(defun shan/refresh-buffer ()
  "Refresh the current buffer."
  (interactive)
  (revert-buffer :ignore-auto :noconfirm))
#+END_SRC

[[[https://emacs.stackexchange.com/a/340][Credit]]]

#+BEGIN_SRC emacs-lisp
(defun shan/scratch ()
  "Create a new scratch buffer to work in. (could be *scratch* - *scratchX*)"
  (interactive)
  (let ((n 0) bufname)
    (while (progn
             (setq bufname (concat "*scratch"
                                   (if (= n 0) "" (int-to-string n))
                                   "*"))
             (setq n (1+ n))
             (get-buffer bufname)))
    (switch-to-buffer (get-buffer-create bufname))
    (lisp-interaction-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun shan/add-list-to-list (to-list from-list &optional append compare-fn)
  "Adds all elements from from-list to to-list"
  (dolist (elem from-list)
    (add-to-list to-list elem append compare-fn))
  to-list)
#+END_SRC

* Initialization

** Package Archives

Special commands, should always be needed. Note the algorithm is a hotfix to a much larger [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=34341][emacs issue]].

#+BEGIN_SRC emacs-lisp
(require 'package)
;; (setq package-enable-at-startup nil)
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC

Set up all the archive sources to pull from packages from.

#+BEGIN_SRC emacs-lisp
(shan/add-list-to-list 'package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
					   ("melpa" . "http://melpa.org/packages/")
					   ("melpa-stable" . "http://stable.melpa.org/packages/")
					   ("melpa-stable2" . "http://melpa-stable.milkbox.net/packages/")
					   ("org" . "https://orgmode.org/elpa/"))
		       t)
(package-initialize)
#+END_SRC

** Package Installers

[[https://github.com/jwiegley/use-package][use-package]] configuration. Helps clean up rest of the configuration and speeds up startup
by isolating packages. The [[https://github.com/larstvei/Try][try]] package lets you try packages before installing them.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(use-package use-package
  :config
  (setq-default use-package-always-defer nil
		use-package-always-ensure t
		use-package-always-demand t))

(setq-default byte-compile-warnings nil)

(use-package use-package-ensure-system-package)

(use-package try)
#+END_SRC

* Start Up


** Encoding

Begone utf 16!

#+BEGIN_SRC emacs-lisp
(setq-default locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

** Backups

I don't particularly need backup files, and =~= + =#= files are a pain to clean anyways.

#+BEGIN_SRC emacs-lisp
(setq-default backup-inhibited t
	      auto-save-default nil
	      create-lockfiles nil
	      make-backup-files nil)
#+END_SRC

** Version Specific

Weird errors of GTK without this.

#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 26)
  (setq-default confirm-kill-processes nil))
#+END_SRC

** GUI

You need to experience keyboard to realize keyboard master race. (fn + f10 if need be for options though)

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)

(when (display-graphic-p)
  (menu-bar-mode 0)
  (toggle-scroll-bar 0)
  (tool-bar-mode 0))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
(use-package org
  :mode
  ("\\.\\(org\\|ORG\\)\\'" . org-mode)
  :ensure nil
  :hook
  (org-babel-after-execute . org-redisplay-inline-images)
  :custom
  (org-file-apps
   '((auto-mode . emacs)
     ("\\.x?html?\\'" . "/usr/bin/firefox -private-window %s")
     ("\\.pdf\\(::[0-9]+\\)?\\'" . "epdfview %s")))

  (org-directory "~/.orgfiles")
  (org-default-notes-file (concat org-directory "/notes.org"))
  (org-export-html-postamble nil)

  (org-image-actual-width 480)
  (org-src-fontify-natively t)
  (org-src-window-setup 'current-window)
  (org-src-strip-leading-and-trailing-blank-lines t)
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively t)
  (org-pretty-entities t)
  (org-hide-emphasis-markers t)
  (org-startup-with-inline-images t)
  (org-babel-python-command "ipython3 -i --simple-prompt")
  (org-format-latex-options (plist-put org-format-latex-options :scale 1.4))

  (org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
  (org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0.11.jar")
  :config
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

  (use-package ob-ipython)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa      . t)
     (dot        . t)
     (emacs-lisp . t)
     (gnuplot    . t)
     (js         . t)
     (latex      . t)
     (ocaml      . t)
     (org        . t)
     (plantuml   . t)
     (python     . t)
     (shell      . t)
     (R          . t)
     ))

  (add-to-list 'org-src-lang-modes
               '("plantuml" . fundamental)))

(use-package toc-org
  :after org
  :hook
  (org-mode . toc-org-enable))

(use-package org-bullets
  :hook
  (org-mode . org-bullets-mode))

(use-package px)

(use-package htmlize)

(use-package ox-gfm
  :after (org))

(use-package ox-pandoc)
#+END_SRC
