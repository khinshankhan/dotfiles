#+TITLE: An Emacs Configuration
#+AUTHOR: Khinshan Khan
#+STARTIP: overview

* Personal Variables

#+BEGIN_SRC emacs-lisp
  (setq-default user-full-name "Khinshan Khan"
                user-mail-address "khinshan.khan@gmail.com")
#+END_SRC

* Encoding

#+BEGIN_SRC emacs-lisp
  ;; begone utf 16
  (setq-default locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* Backups

#+BEGIN_SRC emacs-lisp
  (setq-default backup-inhibited t
                auto-save-default nil
                create-lockfiles nil
                make-backup-files nil)
#+END_SRC

* Basic package

#+BEGIN_SRC emacs-lisp
  (require 'package)
  ;;(setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)

  ;; Bootstrap use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (use-package use-package
    :config
    (setq use-package-always-ensure t))

  ;; keyword, allows you to ensure system binaries exist alongside your package declarations
  ;; https://github.com/jwiegley/use-package#use-package-ensure-system-package
  (use-package use-package-ensure-system-package)

  ;; lets you try packages before installing them
  (use-package try)
#+END_SRC

* Functions

** Definitions

#+BEGIN_SRC emacs-lisp
  (defun ign:split-window-right ()
    (interactive)
    (split-window-right)
    (balance-windows))

  (defun ign:split-window-below ()
    (interactive)
    (split-window-below)
    (balance-windows))

  (defun ign:delete-window ()
    (interactive)
    (delete-window)
    (balance-windows))

  (defun ign:delete-buffer ()
    (interactive)
    (ido-kill-buffer))

  (defun ign:fill-or-unfill ()
    (interactive)
    (let ((fill-column
           (if (eq last-command 'endless/fill-or-unfill)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

  (defun ign:refresh-buffer ()
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (defun ign:reload ()
    (interactive)
    (load-file (concat user-emacs-directory "init.el")))

  (defun ign:toggle-mark ()
    (interactive)
    (if (region-active-p)
        (deactivate-mark)
      (push-mark nil nil t)))

  (defun ign:toggle-mark-rectangle ()
    (interactive)
    (if (region-active-p)
        (deactivate-mark)
      (rectangle-mark-mode)))

  (defun ign:first-occurence (f list)
    (let ((head (car list))
          (tail (cdr list)))
      (if (or (not head) (funcall f head))
          head
        (ign:first-occurence f tail))))

  (defmacro ign:find-executables (list)
    (ign:first-occurence #'executable-find list))
#+END_SRC

* Custom Variables

#+BEGIN_SRC emacs-lisp
  (defconst custom-file "/dev/zero")
  (defconst ign:python-executable "python3")
  (defconst ign:ipython-executable "ipython3")
  (defconst ign:cl-executable (ign:find-executables ("sbcl" "lisp" "ccl")))
#+END_SRC

* System

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 26)
    (setq-default confirm-kill-processes nil))
#+END_SRC

* GUI

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (menu-bar-mode 0)
  (toggle-scroll-bar 0)
  (tool-bar-mode 0)
#+END_SRC

* Appearance

** Cursor

#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type '(hbar . 1))
  (setq-default cursor-in-non-selected-windows nil)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  (when (member "Iosevka" (font-family-list))
    (set-face-attribute 'default nil
                        :family "Iosevka"
                        :height 110
                        :weight 'normal
                        :width 'normal))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (doom-themes-org-config)
    (load-theme 'doom-nord t))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)

  (use-package doom-modeline
    :custom
    (doom-modeline-python-executable ign:python-executable)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-version t)
    :config
    (doom-modeline-mode))
#+END_SRC

* Interface

** Splash Screen

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-banner-logo-title
     (format "[Emacs ready in %.2f seconds with %d packages loaded and %d garbage collections.]"
             (float-time (time-subtract after-init-time before-init-time))
             (length package-activated-list) gcs-done))
    (dashboard-startup-banner 'logo)
    (dashboard-items '((recents  . 5)
                       (projects . 5)))
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** Scratch buffer

#+BEGIN_SRC emacs-lisp
  ;;(setq-default initial-major-mode 'python-mode)
  (setq-default initial-major-mode 'lisp-interaction-mode)
#+END_SRC

** Lines

#+BEGIN_SRC emacs-lisp
  (setq-default transient-mark-mode t
                visual-line-mode t
                indent-tabs-mode nil
                tab-width 4)

  (global-hl-line-mode 1)
#+END_SRC

** Line Numbers

#+BEGIN_SRC emacs-lisp
  (use-package linum
    :ensure nil
    :if (< emacs-major-version 26)
    :hook
    (prog-mode . linum-mode)
    :custom
    (linum-format " %d ")
    :config
    (set-face-underline 'linum nil))

  (use-package display-line-numbers
    :ensure nil
    :if (>= emacs-major-version 26)
    :hook
    (prog-mode . display-line-numbers-mode)
    :custom
    ;;(display-line-numbers-type 'relative)
    (display-line-numbers-current-absolute t)
    (display-line-numbers-width 2)
    (display-line-numbers-widen t))
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
  (setq-default scroll-margin 0
                scroll-conservatively 10000
                scroll-preserve-screen-position t
                mouse-wheel-progressive-speed nil)
#+END_SRC

** Confirmation messages

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p (lambda (&rest _) t))
  (setq-default confirm-kill-emacs nil)
#+END_SRC

** Bells

#+BEGIN_SRC emacs-lisp
  (setq-default visible-bell nil
                audible-bell nil
                ring-bell-function 'ignore)
#+END_SRC

* Completion Frontend

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :demand
    :bind
    (:map ivy-minibuffer-map
          ("RET" . ivy-alt-done))
    :custom
    (ivy-initial-inputs-alist nil))

  (use-package counsel
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-h v" . counsel-describe-variable)
    ("C-h f" . counsel-describe-function)
    ("C-x b" . counsel-ibuffer))

  (use-package swiper
    :bind
    ("C-s" . swiper-isearch))
#+END_SRC

** All the Icons

#+BEGIN_SRC emacs-lisp
  ;; remember to refresh
  ;; https://github.com/domtronn/all-the-icons.el
  (use-package all-the-icons
    :defer 0.5)

  (use-package all-the-icons-ivy
    :after (all-the-icons ivy)
    :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window ivy-switch-buffer))
    :config
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
    (all-the-icons-ivy-setup))


  (use-package all-the-icons-dired)

  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode
    ("\\.\\(org\\|ORG\\)\\'" . org-mode)
    :ensure nil
    :custom
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-pretty-entities t)
    (org-hide-emphasis-markers t)
    (org-babel-python-command "ipython3 -i --simple-prompt")
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (emacs-lisp . t)
       (gnuplot . t)
       (js . t)
       (latex . t )
       (ocaml . t)
       (org . t)
       (python . t)
       (shell . t)
       (R . t)
       )))

  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))


  (custom-set-variables
   '(org-directory "~/.orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-hide-leading-stars t)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t)
   )

  (setq org-file-apps
        (append '(
                  ("\\.pdf\\'" . "epdfview %s")
                  ("\\.x?html?\\'" . "/usr/bin/chromium %s")
                  ) org-file-apps ))

  (use-package ox-gfm
    :after (org))
#+END_SRC

* Programming

** General

*** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand t
    :bind
    (:map projectile-mode-map
          ("C-c p" . projectile-command-map))
    :custom
    (projectile-project-search-path '("~/Projects/"))
    ;; ignore set up: https://www.youtube.com/watch?v=qpv9i_I4jYU
    (projectile-indexing-method 'hybrid)
    (projectile-sort-order 'access-time)
    (projectile-enable-caching t)
    (projectile-require-project-root t)
    (projectile-completion-system 'ivy)
    :config
    (projectile-mode t)
    ;;(setq projectile-completion-system 'ivy)
    (counsel-projectile-mode))

  (use-package counsel-projectile
    :after (counsel projectile))
#+END_SRC

*** Interactive

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :config
    (global-aggressive-indent-mode 1))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    (require 'smartparens-config))

  (use-package paren
    :config
    (show-paren-mode t))

  (use-package move-text
    :config
    (move-text-default-bindings))
#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    ("C-c g" . magit-status))

  ;; need help figuring this one out
  (use-package git-timemachine
    :bind
    ("C-c t" . git-timemachine))

  (use-package gitignore-mode
    :mode ("\\.gitignore\\'" . gitignore-mode))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind
    ("C-SPC" . company-complete)
    (:map company-active-map
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous))
    :custom-face
    (company-tooltip ((t (:foreground "#ABB2BF" :background "#30343C"))))
    (company-tooltip-annotation ((t (:foreground "#ABB2BF" :background "#30343C"))))
    (company-tooltip-selection ((t (:foreground "#ABB2BF" :background "#393F49"))))
    (company-tooltip-mouse ((t (:background "#30343C"))))
    (company-tooltip-common ((t (:foreground "#ABB2BF" :background "#30343C"))))
    (company-tooltip-common-selection ((t (:foreground "#ABB2BF" :background "#393F49"))))
    (company-preview ((t (:background "#30343C"))))
    (company-preview-common ((t (:foreground "#ABB2BF" :background "#30343C"))))
    (company-scrollbar-fg ((t (:background "#30343C"))))
    (company-scrollbar-bg ((t (:background "#30343C"))))
    (company-template-field ((t (:foreground "#282C34" :background "#C678DD"))))
    :custom
    (company-idle-delay 120)
    :config
    (global-company-mode t))

  (use-package company-quickhelp
    :demand t
    :after (company)
    :config
    (company-quickhelp-mode))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :custom-face
    (flycheck-info ((t (:underline (:style line :color "#80FF80")))))
    (flycheck-warning ((t (:underline (:style line :color "#FF9933")))))
    (flycheck-error ((t (:underline (:style line :color "#FF5C33")))))
    :custom
    (flycheck-check-syntax-automatically '(mode-enabled save))
    :config
    (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00111000
              #b01111100
              #b11111110
              #b11111110
              #b11111110
              #b01111100
              #b00111000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000))
    (flycheck-define-error-level 'info
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-info
      :info-list-face 'flycheck-error-list-info)
    (flycheck-define-error-level 'warning
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-warning
      :warning-list-face 'flycheck-error-list-warning)
    (flycheck-define-error-level 'error
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-error
      :error-list-face 'flycheck-error-list-error)
    (global-flycheck-mode t))

  (use-package flycheck-clang-analyzer
    :after (flycheck)
    :config (flycheck-clang-analyzer-setup))

  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
#+END_SRC

** Misc Helpers

#+BEGIN_SRC emacs-lisp
(use-package demangle-mode)

(use-package modern-cpp-font-lock)
#+END_SRC

** TRAMP

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :ensure nil
    :config
    ;; faster than scp
    (setq tramp-default-method "ssh")
    (add-to-list 'tramp-default-user-alist
                 '("ssh" "eniac.*.edu\\'" "Khinshan.Khan44") ;; current eniac logins
                 '(nil nil "shan")) ;; fallback login

    (setq password-cache-expiry nil)
    )

  ;; this hook makes remote projectile a little lighter
  (add-hook 'find-file-hook
            (lambda ()
              (when (file-remote-p default-directory)
                (setq-local projectile-mode-line "Projectile"))))
#+END_SRC

* Languages
** C

#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure nil
    :hook
    (c-mode . (lambda () (setq indent-tabs-mode t)
                (global-aggressive-indent-mode -1)))
    :custom
    (c-default-style "linux")
    (c-basic-offset 4))

  (use-package company-c-headers
    :after (company)
    :config
    (add-to-list 'company-backends 'company-c-headers))
#+END_SRC

** C++

#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :config
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                  (ggtags-mode 1))))
    )

  (add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++14")))
  (add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++14")))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
  (use-package cider)
#+END_SRC

** GNU Plot

#+BEGIN_SRC emacs-lisp
  (use-package gnuplot)
  (use-package gnuplot-mode)
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs\\'")
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :mode (("\\.lua\\'" . lua-mode))
    :config (add-hook 'lua-mode-hook #'company-mode))
#+END_SRC

** OCaml

#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :ensure-system-package ((opam . opam)
                            (tuareg . "opam install tuareg -y")
                            (ocamlmerlin . "opam install merlin -y")
                            (ocp-indent . "opam install ocp-indent -y"))
    :after (company)
    :mode ("\\.ml[ly]\\'" . tuareg-menhir-mode)
    :custom
    (tuareg-match-patterns-aligned t)
    (tuareg-indent-align-with-first-arg t))

  (use-package merlin
    :after (tuareg)
    :hook (tuareg-mode . merlin-mode)
    :config
    (when (file-exists-p "~/.emacs.d/opam-user-setup.el")
      (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")))

  (use-package ocp-indent
    :after (tuareg)
    :commands (ocp-indent-caml-mode-setup)
    :hook (tuareg-mode . ocp-indent-caml-mode-setup))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (use-package pip-requirements)
  (use-package sphinx-doc
    :hook
    (python-mode . sphinx-doc-mode))

  (use-package python
    :ensure nil
    :after (flycheck)
    :custom
    (python-indent 4)
    (python-shell-interpreter ign:ipython-executable)
    (python-shell-interpreter-args "--simple-prompt -i")
    (python-fill-docstring-style 'pep-257)
    (gud-pdb-command-name (concat ign:python-executable " -m gdb"))
    (py-split-window-on-execute t))

  (use-package elpy
    :after (company)
    :bind
    (:map python-mode-map
          ("C-c d" . elpy-goto-definition)
          ("C-c e" . elpy-multiedit-python-symbol-at-point)
          ("C-c f" . elpy-black-fix-code))
    :hook (python-mode . elpy-mode)
    :custom
    (elpy-rpc-python-command ign:python-executable)
    :config
    (delete 'elpy-module-highlight-indentation elpy-modules)
    (delete 'elpy-module-flymake elpy-modules)
    (delete 'elpy-module-company elpy-modules)
    (add-to-list 'company-backends #'elpy-company-backend)
    (elpy-enable))

  (use-package company-jedi
    :after (company)
    :config
    (add-to-list 'company-backends 'company-jedi))
#+END_SRC

** Juypter

#+BEGIN_SRC emacs-lisp
  (use-package ein
    :custom
    (ein:completion-backend 'ein:use-company-jedi-backends)
    (ein:use-auto-complete-superpack t))
#+END_SRC

** R & Julia

#+BEGIN_SRC emacs-lisp
  (use-package ess
    :pin melpa-stable
    :mode
    ("\\.[rR]\\'" . R-mode)
    :config
    (require 'ess-site))
#+END_SRC

* Text Editing

#+BEGIN_SRC emacs-lisp
  (setq-default require-final-newline t)
  (global-subword-mode t)
  (delete-selection-mode t)
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+END_SRC

** Expand Region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind
    ("C-=" . er/expand-region))
#+END_SRC

** Yasnippet

*** basic

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (use-package yasnippet-snippets)
    (yas-global-mode 1))
#+END_SRC

*** auto-yasnippet

#+BEGIN_SRC emacs-lisp :tangle off
  (use-package auto-yasnippet)
#+END_SRC

* Text Navigation

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind
    ("C-'" . avy-goto-char-2)
    :custom
    (avy-keys '(?a ?r ?s ?t ?n ?e ?i ?o)))

  (use-package ace-window
    :bind
    ("C-x C-w" . ace-window)
    :custom
    (aw-keys '(?a ?r ?s ?t ?n ?e ?i ?i)))
#+END_SRC

* Bindings

#+BEGIN_SRC emacs-lisp
  ;; good for dvorak and colemak
  ;;(keyboard-translate ?\C-t ?\C-x)
  ;;(keyboard-translate ?\C-x ?\C-t)

  (define-key key-translation-map (kbd "M-t") (kbd "M-x"))
  (define-key comint-mode-map (kbd "C-l") #'comint-clear-buffer)

  (use-package bind-key)
  (bind-key* "C-x w" 'ign:delete-window)
  (bind-key* "C-x k" 'ign:delete-buffer)
  (bind-key* "C-c w" 'ign:split-window-right)

  (bind-key* "C-c i" 'auto-insert)
  (bind-key* "M-/" 'hippie-expand)
  (bind-key* "C-;" 'company-yasnippet)

  ;; soft wrap lines for org mode, disabled by default for org tables
  ;; we may need to remap this key later, since C-z suspends in other modes
  (define-key org-mode-map "\C-z" 'toggle-truncate-lines)

  ;; will set up bookmarks later.. maybe
  (global-set-key (kbd "C-c n") (lambda() (interactive)(find-file "~/.orgfiles/notes.org")))

  (global-set-key (kbd "C-c m") 'recompile)
#+END_SRC

** Which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    :bind
    ("C-h m" . which-key-show-major-mode)
    ("C-h b" . which-key-show-top-level))
#+END_SRC

* Community

** Browser

#+BEGIN_SRC emacs-lisp
  ;;(setq-default browse-url-browser-function 'browse-url-chromium)
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-args '("--incognito")
        browse-url-generic-program "chromium")

  (defun browse-lucky (start end)
    (interactive "r")
    (let ((q (buffer-substring-no-properties start end)))
      (browse-url-generic (concat "http://www.google.com/search?btnI&q="
                                  (url-hexify-string q)))))
#+END_SRC

** Discord

#+BEGIN_SRC emacs-lisp
  (use-package elcord
    :if (executable-find "discord")
    :config
    (elcord-mode))
#+END_SRC
