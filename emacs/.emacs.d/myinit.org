#+TITLE: An Emacs Configuration
#+AUTHOR: Khinshan Khan
#+STARTUP: overview

* Preface


After using emacs for a while (since my first programming class in high school), I decided to create my own
configuration which I can use on most (if not any) machine. I'm still working on creating checks to ensure smooth
runs, but Windows has proven to be sightly difficult with the package manager.

For more informations about myself, you can visit my website.

This configuration is based on various emacs tips, users, and emacs itself (yes! You can talk to emacs to learn
from it. Super classy move with =C-h [key such as f or v]=, since it's self documenting).

A special thanks to my emacs crew: [[https://github.com/Lgneous]["Igneous"]], [[https://github.com/Dreameh]["Dreameh"]], and [[https://github.com/berquist]["speckledlemon"]].

* Tricks n Gimmicks for Sweeter Configuration

Mostly just useful variables and functions.

** Personal Variables

Me, myself, and I.

These are personal preferences for emacs file structure.

#+BEGIN_SRC emacs-lisp
(defconst custom-file "/dev/zero")
(defconst shan/settings-path (concat user-emacs-directory "personal/settings.el"))
(defconst shan/settings-exist (file-exists-p shan/settings-path))
#+END_SRC

A couple of booleans so we don't have to check everytime.

#+BEGIN_SRC emacs-lisp
(when shan/settings-exist
  (load-file shan/settings-path))

(defconst shan/is-a-mac (memq window-system '(mac ns)))
#+END_SRC

Personal favored variables

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks nil)
(defconst shan/preferred-logo "personal/hifumi-sweater-emacs.png")
#+END_SRC

Shorthands

#+BEGIN_SRC emacs-lisp
(defconst shan/init-path (concat user-emacs-directory "init.el"))
(defconst shan/config-path (concat user-emacs-directory "myinit.org"))
(defconst shan/python-executable "python3")
(defconst shan/ipython-executable "ipython3")
#+END_SRC

** General Functions

Personal functions, some packages are reliant on these, so it goes on top. Working on credit for people not 
mentioned in preface and significant enough. Functions are split into... "sensible" groups. 

#+BEGIN_QUOTE
 [[[https://emacs.stackexchange.com/a/340][Credit: scratch]]]
 [[[https://stackoverflow.com/questions/95631/open-a-file-with-su-sudo-inside-emacs/7043786][Credit: sudo-edit]]]
 [[[https://github.com/purcell/emacs.d/blob/master/lisp/init-utils.el#L40-L48][Credit: delete-this-file]]]
 [[[https://github.com/purcell/emacs.d/blob/master/lisp/init-utils.el#L51-L65][Credit: rename-this-file-and-buffer]]]
 [[[https://github.com/purcell/emacs.d/blob/master/lisp/init-utils.el#L67-L77][Credit: browse-current-file]]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(defun shan/do-nothing ()
  "Do nothing."
  (interactive)
  nil)

(defun shan/before (to-call-before f)
  "Run TO-CALL-BEFORE then run F."
  (funcall to-call-before)
  (funcall f))

(defun shan/after (to-call-after f)
  "Run F then run TO-CALL-AFTER."
  (funcall f)
  (funcall to-call-after))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun shan/split-window-right ()
  "Create a new window split to the right and balance the windows."
  (interactive)
  (shan/after #'balance-windows #'split-window-right))

(defun shan/split-window-below ()
  "Create a new window split below and balance the windows."
  (interactive)
  (shan/after #'balance-windows #'split-window-below))

(defun shan/delete-window ()
  "Delete the current window and balance the windows."
  (interactive)
  (shan/after #'balance-windows #'delete-window))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun shan/delete-buffer ()
  "Delete the current buffer and go to next most recent buffer."
  (interactive)
  (ido-kill-buffer))

(defun shan/refresh-buffer ()
  "Refresh the current buffer."
  (interactive)
  (revert-buffer :ignore-auto :noconfirm))

(defun shan/scratch ()
  "Create a new scratch buffer to work in. (could be *scratch* - *scratchX*)"
  (interactive)
  (let ((n 0) bufname)
    (while (progn
             (setq bufname (concat "*scratch"
                                   (if (= n 0) "" (int-to-string n))
                                   "*"))
             (setq n (1+ n))
             (get-buffer bufname)))
    (switch-to-buffer (get-buffer-create bufname))
    (lisp-interaction-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun shan/toggle-mark ()
  "Pop a mark if one doesn't exist already, deactivate it otherwise."
  (interactive)
  (if (region-active-p)
      (deactivate-mark)
    (push-mark nil nil t)))

(defun shan/toggle-mark-rectangle ()
  "Pop a rectangle mark if one doesn't exist already, deactivate it otherwise."
  (interactive)
  (if (region-active-p)
      (deactivate-mark)
    (rectangle-mark-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp

(defun shan/first-occurence (f list)
  "Return the first occurence in LIST which, when applied to PREDICATE returns t."
  (let ((head (car list))
        (tail (cdr list)))
    (if (or (not head) (funcall f head))
        head
      (shan/first-occurence f tail))))

(defun shan/last-occurence (predicate list)
  "Return the last occurence in LIST which, when applied to PREDICATE returns t."
  (shan/first-occurence predicate (reverse list)))

(defmacro shan/find-executables (list)
  "Return the first occurence in LIST whose value corresponds to an executable."
  (shan/first-occurence #'executable-find list))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun shan/sudo-edit (file-name)
  "Like find file, but opens the file as root."
  (interactive "FSudo Find File: ")
  (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
    (find-file tramp-file-name)))

(defun shan/delete-this-file ()
  "Delete the current file, and kill the buffer."
  (interactive)
  (unless (buffer-file-name)
    (error "No file is currently being edited"))
  (when (yes-or-no-p (format "Really delete '%s'?"
                             (file-name-nondirectory buffer-file-name)))
    (delete-file (buffer-file-name))
    (kill-this-buffer)))

(defun shan/rename-this-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (unless filename
      (error "Buffer '%s' is not visiting a file!" name))
    (progn
      (when (file-exists-p filename)
        (rename-file filename new-name 1))
      (set-visited-file-name new-name)
      (rename-buffer new-name))))

(defun shan/browser-current-file ()
  "Open the current file as a URL using `browse-url'."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if (and (fboundp 'tramp-tramp-file-p)
             (tramp-tramp-file-p file-name))
        (error "Cannot open tramp file")
      (browse-url (concat "file://" file-name)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun shan/fill-or-unfill ()
  "Fill or unfill based on the previous command."
  (interactive)
  (let ((fill-column
         (if (eq last-command 'endless/fill-or-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'fill-paragraph)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun shan/add-list-to-list (to-list from-list &optional append compare-fn)
  "Adds all elements from from-list to to-list"
  (dolist (elem from-list)
    (add-to-list to-list elem append compare-fn))
  to-list)

(defun shan/copy-hooks-to (from-hook to-hook)
  "Copies one list of hooks to another, without the weird nonc circular list problem"
  (dolist (hook from-hook)
    (add-hook to-hook hook)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun shan/call-keymap (map &optional prompt)
  "Read a key sequence and call the command it's bound to in MAP."
  (let* ((help-form `(describe-bindings ,(vector map)))
         (key (read-key-sequence prompt))
         (cmd (lookup-key map key t)))
    (if (functionp cmd) (call-interactively cmd)
      (user-error "%s is undefined" key))))

(defun shan/exec-call-keymap (keymap prompt)
  "Executes `shan/call-keymap'"
  (interactive)
  (shan/call-keymap keymap prompt))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun shan/reload ()
  "Reload the configuration file."
  (interactive)
  (load-file shan/init-path))

(defun shan/edit-config ()
  "Edit the configuration file."
  (interactive)
  (find-file shan/config-path))
#+END_SRC

* Initialization

** Package Archives

Special commands, should always be needed. Note the algorithm is a hotfix to a much larger [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=34341][emacs issue]].

#+BEGIN_SRC emacs-lisp
(require 'package)
;; (setq package-enable-at-startup nil)
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC

Set up all the archive sources to pull from packages from.

#+BEGIN_SRC emacs-lisp
(shan/add-list-to-list 'package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
					   ("melpa" . "http://melpa.org/packages/")
					   ("melpa-stable" . "http://stable.melpa.org/packages/")
					   ("melpa-stable2" . "http://melpa-stable.milkbox.net/packages/")
					   ("org" . "https://orgmode.org/elpa/"))
		       t)
(package-initialize)
#+END_SRC

** Package Installers

[[https://github.com/jwiegley/use-package][use-package]] configuration. Helps clean up rest of the configuration and speeds up startup
by isolating packages. The [[https://github.com/larstvei/Try][try]] package lets you try packages before installing them.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(use-package use-package
  :config
  (setq-default use-package-always-defer nil
		use-package-always-ensure t
		use-package-always-demand t))

(setq-default byte-compile-warnings nil)

(use-package use-package-ensure-system-package)

(use-package try)
#+END_SRC

* Start Up

** Encoding

Begone utf 16!

#+BEGIN_SRC emacs-lisp
(setq-default locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

** Backups

I don't particularly need backup files, and =~= + =#= files are a pain to clean anyways.

#+BEGIN_SRC emacs-lisp
(setq-default backup-inhibited t
	      auto-save-default nil
	      create-lockfiles nil
	      make-backup-files nil)
#+END_SRC

** Version Specific

Weird errors of GTK without this.

#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 26)
  (setq-default confirm-kill-processes nil))
#+END_SRC

** Bindings

*** Key Chords

#+BEGIN_SRC emacs-lisp
(use-package use-package-chords
  :after (key-chord))

(use-package key-chord
  :custom
  (key-chord-two-keys-delay 0.05)
  :config
  (key-chord-mode t))
#+END_SRC

*** Hydra

#+BEGIN_SRC emacs-lisp
(use-package posframe
  :preface
  (defun posframe-poshandler-frame-bottom-center (info)
    (cons (/ (- (plist-get info :parent-frame-width)
                (plist-get info :posframe-width))
             2)
          (- -60
             (plist-get info :mode-line-height)
             (plist-get info :minibuffer-height)))))

(use-package hydra
  :after (posframe)
  :preface
  (defun hydra-posframe--hotfix (&rest _)
    (posframe-funcall
     " *hydra-posframe*"
     (lambda ()
       (fit-frame-to-buffer (selected-frame) nil
                            (+ (count-lines (point-min) (point-max)) 1)
                            nil nil)
       (redirect-frame-focus (selected-frame) (frame-parent (selected-frame))))))
  :custom
  (hydra--work-around-dedicated nil)
  (hydra-posframe-show-params
   (list
    :internal-border-width 0
    :background-color "#1c1e24"
    :poshandler 'posframe-poshandler-frame-bottom-center))
  (hydra-hint-display-type 'lv)
  :chords
  ("ao" . hydra-leader/body)
  :config
  (advice-add 'hydra-posframe-show :after #'hydra-posframe--hotfix))

(use-package pretty-hydra
  :after (hydra))
#+END_SRC

*** Hydra Map

#+BEGIN_SRC emacs-lisp
(pretty-hydra-define hydra-config (:exit t :color amaranth :title " Personal" :quit-key "q")
  (" Configuration"
   (("e" shan/edit-config "config file")
    ("r" shan/reload "reload")
    ("g" shan/refresh-buffer "refresh buffer"))
   " Elfeed"
   ()
   " Exit"
   (("<deletechar>" save-buffers-kill-terminal "quit emacs")
    ("DEL" hydra-leader/body (propertize "+leader" 'face 'bold)))))

(pretty-hydra-define hydra-help (:exit t :color amaranth :title " Help" :quit-key "q")
  ("Bindings"
   (("b" counsel-descbinds "all")
    ("m" which-key-show-major-mode "major mode"))
   "Describes"
   (("f" counsel-describe-function "function")
    ("k" describe-key "key")
    ("v" counsel-describe-variable "variable"))
   "Others"
   (("F" counsel-describe-face "face")
    ("l" view-lossage "command history"))
   " Exit"
   (("DEL" hydra-leader/body (propertize "+leader" 'face 'bold)))))

(pretty-hydra-define hydra-projectile (:exit t :color amaranth :title " Projectile" :quit-key "q")
  (""
   (("a" projectile-find-other-file "find other file")
    ("b" projectile-switch-to-buffer "switch buffer")
    ("c" projectile-compile-project "compile")
    ("d" projectile-find-dir "find directory"))
   ""
   (("e" projectile-recentf "recent files")
    ("f" projectile-find-file "find file")
    ("g" projectile-grep "grep")
    ("k" projectile-kill-buffers "kill project buffers"))
   ""
   (("p" projectile-switch-project "switch project")
    ("t" projectile-toggle-between-implementation-and-test "impl ↔ test")
    ("v" projectile-vc "version control"))
   " Exit"
   (("DEL" hydra-leader/body (propertize "+leader" 'face 'bold)))))

(pretty-hydra-define hydra-avy (:exit t :color amaranth :title " Avy" :quit-key "q")
  ("Goto"
   (("c" avy-goto-char-timer "timed char")
    ("C" avy-goto-char "char")
    ("w" avy-goto-word-1 "word")
    ("W" avy-goto-word-0 "word*")
    ("l" avy-goto-line "bol")
    ("L" avy-goto-end-of-line "eol"))
   "Line"
   (("m" avy-move-line "move")
    ("k" avy-kill-whole-line "kill")
    ("y" avy-copy-line "yank"))
   "Region"
   (("M" avy-move-region "move")
    ("K" avy-kill-region "kill")
    ("Y" avy-copy-region "yank"))
   " Exit"
   (("DEL" hydra-leader/body (propertize "+leader" 'face 'bold)))))

(pretty-hydra-define hydra-window (:exit nil :color amaranth :title " Windows" :quit-key "q")
  ("Split"
   (("2" split-window-below "below")
    ("3" split-window-right "right"))
   "Movement"
   (("b" balance-windows "balance")
    ("k" delete-window "kill" :exit t)
    ("w" other-window "move"))
   " Exit"
   (("DEL" hydra-leader/body (propertize "+leader" 'face 'bold) :exit t))))

(pretty-hydra-define hydra-lsp (:exit t :color amaranth :title " LSP" :quit-key "q")
  ("Find"
   (("." lsp-ui-peek-find-references "find references")
    ("d" lsp-find-definition "find definition")
    ("t" lsp-find-type-definition "find type definition"))
   "Refactor"
   (("e" lsp-rename "rename symbol at point")
    ("f" lsp-format-buffer "format buffer"))
   "Show"
   (("j" lsp-ui-imenu "symbol table")
    ("l" lsp-ui-flycheck-list "error list"))
   " Exit"
   (("DEL" hydra-leader/body (propertize "+leader" 'face 'bold)))))

(pretty-hydra-define hydra-leader (:exit t :color amaranth :title " Leader" :quit-key "q")
  (""
   (("RET" hydra-config/body (propertize "+config" 'face 'bold))
    ("SPC" shan/ide-resolve (propertize "+ide" 'face 'bold))
    ("h" hydra-help/body (propertize "+help" 'face 'bold)))
   ""
   (("f" counsel-find-file "management")
    ("p" hydra-projectile/body (propertize "+project" 'face 'bold))
    ("a" hydra-avy/body (propertize "+jump" 'face 'bold))
    ("w" hydra-window/body (propertize "+window" 'face 'bold)))
   ""
   (("u" undo "undo" :exit nil)
    ("t" counsel-M-x "M-x")
    ("c" (shan/exec-call-keymap 'Control-X-prefix "C-x") "C-x")
    ("s" save-buffer "save"))))
#+END_SRC

** GUI

You need to experience keyboard to realize keyboard master race. (fn + f10 if need be for options though)

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)

(when (display-graphic-p)
  (menu-bar-mode 0)
  (toggle-scroll-bar 0)
  (tool-bar-mode 0))
#+END_SRC

** Appearance

*** Theme

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :if (display-graphic-p)
  :custom
  (doom-vibrant-brighter-comments t)
  (doom-vibrant-brighter-modeline t)
  :config
  (doom-themes-org-config)
  (load-theme 'doom-nova t))

(use-package solaire-mode
  :functions persp-load-state-from-file
  :hook
  (prog-mode . turn-on-solaire-mode)
  (minibuffer-setup . solaire-mode-in-minibuffer)
  (after-load-theme . solaire-mode-swap-bg)
  :custom
  (solaire-mode-remap-modeline nil)
  (solaire-mode-remap-fringe nil)
  :config
  (solaire-global-mode 1)
  (solaire-mode-swap-bg)
  (advice-add #'persp-load-state-from-file
	      :after #'solaire-mode-restore-persp-mode-buffers))
#+END_SRC

** Mode Line

#+BEGIN_SRC emacs-lisp
(line-number-mode t)
(column-number-mode t)

(use-package doom-modeline
  :if (display-graphic-p)
  :custom
  (doom-modeline-python-executable shan/python-executable)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-version t)
  (doom-modeline-buffer-file-name-style 'file-name)
  :config
  (doom-modeline-mode))
#+END_SRC

** Interface

*** Completetion Frontend

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :bind
  ([switch-to-buffer] . ivy-switch-buffer)
  (:map ivy-minibuffer-map
        ([remap xref-find-definitions] . shan/do-nothing)
        ([remap xref-find-definitions-other-frame] . shan/do-nothing)
        ([remap xref-find-definitions-other-window] . shan/do-nothing)
        ([remap xref-find-references] . shan/do-nothing)
        ([remap xref-find-apropos] . shan/do-nothing)
        ("<return>" . ivy-alt-done))
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "%d/%d ")
  (ivy-height 20)
  (ivy-display-style 'fancy)
  (ivy-format-function 'ivy-format-function-line)
  (ivy-re-builders-alist
   '((t . ivy--regex-plus)))
  (ivy-initial-inputs-alist nil)
  :config
  (ivy-mode))

(use-package counsel
  :bind
  ("M-x" . counsel-M-x)
  ("C-x C-f" . counsel-find-file)
  ("C-h v" . counsel-describe-variable)
  ("C-h f" . counsel-describe-function)
  ("C-x b" . counsel-switch-buffer))

(use-package swiper
  :bind
  ("C-s" . swiper-isearch)
  ("C-r" . swiper-isearch-backward))
#+END_SRC

* Programming

Things that I should need in my prog modes.

** General

*** Interactive

These guys are always active and a series of small things that have become second nature by now.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))

(use-package smartparens
  :hook
  (prog-mode . smartparens-mode)
  :custom
  (sp-escape-quotes-after-insert nil)
  :config
  (require 'smartparens-config))

(use-package paren
  :config
  (show-paren-mode t))

(use-package move-text
  :config
  (move-text-default-bindings))
#+END_SRC

* Org

org-mode is so colossal, it gets its own separate first-level bullet.

#+BEGIN_SRC emacs-lisp
(use-package org
  :mode
  ("\\.\\(org\\|ORG\\)\\'" . org-mode)
  :ensure nil
  :hook
  (org-babel-after-execute . org-redisplay-inline-images)
  :custom
  (org-file-apps
   '((auto-mode . emacs)
     ("\\.x?html?\\'" . "/usr/bin/firefox -private-window %s")
     ("\\.pdf\\(::[0-9]+\\)?\\'" . "epdfview %s")))

  (org-directory "~/.orgfiles")
  (org-default-notes-file (concat org-directory "/notes.org"))
  (org-export-html-postamble nil)

  (org-image-actual-width 480)
  (org-src-fontify-natively t)
  (org-src-window-setup 'current-window)
  (org-src-strip-leading-and-trailing-blank-lines t)
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively t)
  (org-pretty-entities t)
  (org-hide-emphasis-markers t)
  (org-startup-with-inline-images t)
  (org-babel-python-command "ipython3 -i --simple-prompt")
  (org-format-latex-options (plist-put org-format-latex-options :scale 1.4))

  (org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
  (org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0.11.jar")
  :config
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

  (use-package ob-ipython)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa      . t)
     (dot        . t)
     (emacs-lisp . t)
     (gnuplot    . t)
     (js         . t)
     (latex      . t)
     (ocaml      . t)
     (org        . t)
     (plantuml   . t)
     (python     . t)
     (shell      . t)
     (R          . t)
     ))

  (add-to-list 'org-src-lang-modes
               '("plantuml" . fundamental)))

(use-package toc-org
  :after (org)
  :hook
  (org-mode . toc-org-enable))

(use-package org-bullets
  :hook
  (org-mode . org-bullets-mode))

(use-package px)

(use-package htmlize)

(use-package ox-gfm
  :after (org))

(use-package ox-pandoc)
#+END_SRC

* Utils

** PDF

Lifted off of gh user: seagle0128

#+BEGIN_SRC emacs-lisp
(use-package pdf-view
  :ensure pdf-tools
  :diminish (pdf-view-midnight-minor-mode pdf-view-printer-minor-mode)
  :defines pdf-annot-activate-created-annotations
  :functions my-pdf-view-set-midnight-colors
  :commands pdf-view-midnight-minor-mode
  :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :hook (after-load-theme . my-pdf-view-set-dark-theme)
  :bind (:map pdf-view-mode-map
	      ("C-s" . isearch-forward))
  :init
  (setq pdf-annot-activate-created-annotations t)

  (defun my-pdf-view-set-midnight-colors ()
    "Set pdf-view midnight colors."
    (setq pdf-view-midnight-colors
	  `(,(face-foreground 'default) . ,(face-background 'default))))

  (defun my-pdf-view-set-dark-theme ()
    "Set pdf-view midnight theme as color theme."
    (my-pdf-view-set-midnight-colors)
    (dolist (buf (buffer-list))
      (with-current-buffer buf
	(when (eq major-mode 'pdf-view-mode)
	  (pdf-view-midnight-minor-mode (if pdf-view-midnight-minor-mode 1 -1))))))
  :config
  ;; WORKAROUND: Fix compilation errors on macOS.
  ;; @see https://github.com/politza/pdf-tools/issues/480
  (when shan/is-a-mac
    (setenv "PKG_CONFIG_PATH"
	    "/usr/local/lib/pkgconfig:/usr/local/opt/libffi/lib/pkgconfig"))
  (pdf-tools-install t nil t t)

  (my-pdf-view-set-midnight-colors)

  ;; FIXME: Support retina
  ;; @see https://emacs-china.org/t/pdf-tools-mac-retina-display/10243/
  ;; and https://github.com/politza/pdf-tools/pull/501/
  (setq pdf-view-use-scaling t
	pdf-view-use-imagemagick nil)
  (with-no-warnings
    (defun pdf-view-use-scaling-p ()
      "Return t if scaling should be used."
      (and (or (and (eq system-type 'darwin) (string-equal emacs-version "27.0.50"))
	       (memq (pdf-view-image-type)
		     '(imagemagick image-io)))
	   pdf-view-use-scaling))
    (defun pdf-view-create-page (page &optional window)
      "Create an image of PAGE for display on WINDOW."
      (let* ((size (pdf-view-desired-image-size page window))
	     (width (if (not (pdf-view-use-scaling-p))
			(car size)
		      (* 2 (car size))))
	     (data (pdf-cache-renderpage
		    page width width))
	     (hotspots (pdf-view-apply-hotspot-functions
			window page size)))
	(pdf-view-create-image data
			       :width width
			       :scale (if (pdf-view-use-scaling-p) 0.5 1)
			       :map hotspots
			       :pointer 'arrow))))

  ;; Recover last viewed position
  (when (>= emacs-major-version 26)
    (use-package pdf-view-restore
      :hook (pdf-view-mode . pdf-view-restore-mode)
      :init (setq pdf-view-restore-filename
		  (locate-user-emacs-file ".pdf-view-restore")))))
#+END_SRC

* Community

** Browser

Control how links and browser-url-generic function works (also for links).

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-args '("-private")
        browse-url-firefox-program "firefox"
        browse-url-generic-program "firefox")

  (defun browse-lucky (start end)
    (interactive "r")
    (let ((q (buffer-substring-no-properties start end)))
      (browse-url-generic (concat "http://www.google.com/search?btnI&q="
                                  (url-hexify-string q)))))
#+END_SRC

** Discord

Discord rich presence based on emacs + file editing. (tangle off so one doesn't get distracted)

#+BEGIN_SRC emacs-lisp
  (use-package elcord
    :if (executable-find "discord")
    :custom
    (elcord-use-major-mode-as-main-icon t)
    :config
    (elcord-mode))
#+END_SRC

** Wakatime

Monitor my  coding activity.

#+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode
    :if shan/settings-exist
    :custom
    (wakatime-cli-path "/usr/bin/wakatime")
    :init
    (global-wakatime-mode))
#+END_SRC

** Miscellaneous Helpers

Just a salmagundi.

#+BEGIN_SRC emacs-lisp
  (use-package speed-type)

  (use-package origami)

  (use-package demangle-mode)

  (use-package modern-cpp-font-lock)

  (use-package academic-phrases)

  (use-package powerthesaurus)
#+END_SRC
