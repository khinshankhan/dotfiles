#+TITLE: An Emacs Configuration
#+AUTHOR: Khinshan Khan
#+STARTIP: overview

* Preface

After using emacs for a while (since my first programming class in high school), I decided to create my own
configuration which I can use on most (if not any) machine. I'm still working on creating checks to ensure smooth
runs, but Windows has proven to be sightly difficult with the package manager.

For more informations about myself, you can visit my website.

To manage package configurations, I use the use-package package from John Wiegley, which is extremely recommended.

This configuration is based on various emacs tips, users, and emacs itself (yes! You can talk to emacs to learn
from it. Super classy move with =C-h [key such as f or v]=, since it's self documenting).

A special thanks to my emacs crew: [[https://github.com/Lgneous]["Igneous"]], [[https://github.com/Dreameh]["Dreameh"]], and [[https://github.com/berquist]["speckledlemon"]].

* Table of Contents :TOC_3:
- [[#preface][Preface]]
- [[#tricks-n-gimmicks-for-sweeter-configuration][Tricks n Gimmicks for Sweeter Configuration]]
  - [[#personal-variables][Personal Variables]]
  - [[#general-functions][General Functions]]
  - [[#general-variables][General Variables]]
- [[#initialization][Initialization]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#package-archives][Package Archives]]
  - [[#package-installers][Package Installers]]
- [[#start-up][Start Up]]
  - [[#encoding][Encoding]]
  - [[#backups][Backups]]
  - [[#version-specific][Version Specific]]
  - [[#bindings][Bindings]]
    - [[#personal-bindings][Personal Bindings]]
    - [[#which-key][Which-key]]
    - [[#keychords][KeyChords]]
    - [[#hydra][Hydra]]
    - [[#hydra-map][Hydra Map]]
  - [[#gui][GUI]]
  - [[#appearance][Appearance]]
    - [[#beacon][Beacon]]
    - [[#cursor][Cursor]]
    - [[#font][Font]]
    - [[#theme][Theme]]
    - [[#mode-line][Mode-Line]]
  - [[#interface][Interface]]
    - [[#splash-screen][Splash Screen]]
    - [[#scratch-buffer][Scratch buffer]]
    - [[#lines][Lines]]
    - [[#line-numbers][Line Numbers]]
    - [[#scrolling][Scrolling]]
    - [[#confirmation-messages][Confirmation messages]]
    - [[#bells][Bells]]
  - [[#completion-frontend][Completion Frontend]]
    - [[#all-the-icons--dired][All the Icons & Dired]]
- [[#programming][Programming]]
  - [[#general][General]]
    - [[#projectile][Projectile]]
    - [[#interactive][Interactive]]
  - [[#git][Git]]
  - [[#company][Company]]
  - [[#flycheck][Flycheck]]
  - [[#misc-helpers][Misc Helpers]]
  - [[#tramp][TRAMP]]
  - [[#auto-ide][Auto-IDE]]
  - [[#lsp][LSP]]
- [[#languages][Languages]]
  - [[#c-c][C/ C++]]
  - [[#containers][Containers]]
    - [[#docker][Docker]]
    - [[#kubernetes][Kubernetes]]
  - [[#clojure][Clojure]]
  - [[#gnu-plot][GNU Plot]]
  - [[#haskell][Haskell]]
  - [[#juypter][Juypter]]
  - [[#latex][LaTeX]]
  - [[#lua][Lua]]
  - [[#ocaml][OCaml]]
  - [[#pkgbuilds][pkgbuilds]]
  - [[#plantuml][PlantUML]]
  - [[#python][Python]]
  - [[#r--julia][R & Julia]]
  - [[#theorem-provers][Theorem Provers]]
    - [[#lean-prover][Lean Prover]]
  - [[#web-development][Web Development]]
    - [[#html-css-and-friends][HTML, CSS and friends]]
    - [[#tide][Tide]]
    - [[#javascript][JavaScript]]
    - [[#react][React]]
    - [[#vuejs][VueJS]]
  - [[#yaml][YAML]]
- [[#org][Org]]
- [[#text-editing][Text Editing]]
- [[#text-navigation][Text Navigation]]
- [[#language-augmentation][Language Augmentation]]
  - [[#expand-region][Expand Region]]
  - [[#yasnippet][Yasnippet]]
    - [[#basic][basic]]
    - [[#auto-yasnippet][auto-yasnippet]]
  - [[#spell-checking][Spell Checking]]
- [[#community][Community]]
  - [[#browser][Browser]]
  - [[#discord][Discord]]
  - [[#elfeed][Elfeed]]
  - [[#mirrors][Mirrors]]
  - [[#wakatime][Wakatime]]

* Tricks n Gimmicks for Sweeter Configuration

Mostly just useful variables and functions.

** Personal Variables

Me, myself, and I.

#+BEGIN_SRC emacs-lisp
  (defconst custom-file "/dev/zero")
  (defconst shan/settings-path (concat user-emacs-directory "personal/settings.el"))
  (defconst shan/settings-exist (file-exists-p shan/settings-path))

  (when shan/settings-exist
    (load-file shan/settings-path))

  (defconst shan/preferred-logo "personal/hifumi-sweater-emacs.png")
  (defconst shan/elfeed-file (concat user-emacs-directory "personal/elfeed.org"))
  (defconst shan/elfeed-db (concat user-emacs-directory "personal/elfeeddb"))
#+END_SRC

** General Functions

Personal functions, some packages are reliant on these, so it goes on top.

#+BEGIN_SRC emacs-lisp
  (defun shan/do-nothing ()
    "Do nothing."
    (interactive)
    nil)

  (defun shan/before (to-call-before f)
    "Run TO-CALL-BEFORE then run F."
    (funcall to-call-before)
    (funcall f))

  (defun shan/after (to-call-after f)
    "Run F then run TO-CALL-AFTER."
    (funcall f)
    (funcall to-call-after))

  (defun shan/split-window-right ()
    "Create a new window split to the right and balance the windows."
    (interactive)
    (shan/after #'balance-windows #'split-window-right))

  (defun shan/split-window-below ()
    "Create a new window split below and balance the windows."
    (interactive)
    (shan/after #'balance-windows #'split-window-below))

  (defun shan/delete-window ()
    "Delete the current window and balance the windows."
    (interactive)
    (shan/after #'balance-windows #'delete-window))

  (defun shan/delete-buffer ()
    "Delete the current buffer and go to next most recent buffer."
    (interactive)
    (ido-kill-buffer))

  (defun shan/fill-or-unfill ()
    "Fill or unfill based on the previous command."
    (interactive)
    (let ((fill-column
           (if (eq last-command 'endless/fill-or-unfill)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

  (defun shan/refresh-buffer ()
    "Refresh the current buffer."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (defun shan/reload ()
    "Reload the configuration file."
    (interactive)
    (load-file (concat user-emacs-directory "init.el")))

  (defun shan/edit-config ()
    "Edit the configuration file."
    (interactive)
    (find-file
     (concat user-emacs-directory "myinit.org")))

  (defun shan/sudo-edit (file-name)
    "Like find file, but opens the file as root."
    (interactive "FSudo Find File: ")
    (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
      (find-file tramp-file-name)))

  (defun shan/toggle-mark ()
    "Pop a mark if one doesn't exist already, deactivate it otherwise."
    (interactive)
    (if (region-active-p)
        (deactivate-mark)
      (push-mark nil nil t)))

  (defun shan/toggle-mark-rectangle ()
    "Pop a rectangle mark if one doesn't exist already, deactivate it otherwise."
    (interactive)
    (if (region-active-p)
        (deactivate-mark)
      (rectangle-mark-mode)))

  (defun shan/first-occurence (f list)
    "Return the first occurence in LIST which, when applied to PREDICATE returns t."
    (let ((head (car list))
          (tail (cdr list)))
      (if (or (not head) (funcall f head))
          head
        (shan/first-occurence f tail))))

  (defun shan/last-occurence (predicate list)
    "Return the last occurence in LIST which, when applied to PREDICATE returns t."
    (shan/first-occurence predicate (reverse list)))

  (defmacro shan/find-executables (list)
    "Return the first occurence in LIST whose value corresponds to an executable."
    (shan/first-occurence #'executable-find list))

  (defun shan/save-proper ()
    "Save the current buffer and remove trailing whitespace if called interactively."
    (interactive)
    (remove-hook 'before-save-hook #'delete-trailing-whitespace)
    (save-buffer)
    (add-hook 'before-save-hook #'delete-trailing-whitespace))

  (defun shan/ecmd-output (cmd &optional arg)
    "Takes in an elisp command and checks if it has a valid string output when ran.
                                Arguments are optional, should the command require them. It should be noted that
                                if the command returns a string with bad input, this function still returns t."
    (if (stringp arg)
        (not (= (length
                 (funcall cmd arg)) 0))
      (not (= (length
               (funcall cmd)) 0))))

  ;; this is going to get abused, since indices should evaluate to t
  (defun shan/sso(cmd arg)
    "substring-shell-output, checks if running a given command has a substring in
                              it, and returns its index or nil"
    (cl-search arg (shell-command-to-string cmd)))

  (defun shan/copy-hooks-to (from-hook to-hook)
    "Copies one list of hooks to another, without the weird nonc circular list problem"
    (dolist (hook from-hook)
      (add-hook to-hook hook)))

  (defun shan/add-list-to-list (to-list from-list &optional append compare-fn)
    "Adds all elements from from-list to to-list"
    (dolist (elem from-list)
      (add-to-list to-list elem append compare-fn))
    to-list)

  (defun shan/scratch ()
    "Create a new scratch buffer to work in. (could be *scratch* - *scratchX*)"
    (interactive)
    (let ((n 0) bufname)
      (while (progn
               (setq bufname (concat "*scratch"
                                     (if (= n 0) "" (int-to-string n))
                                     "*"))
               (setq n (1+ n))
               (get-buffer bufname)))
      (switch-to-buffer (get-buffer-create bufname))
      (if (= n 1) initial-major-mode)))

  (defun shan/browser-current-file ()
    "Open the current file as a URL using `browse-url'."
    (interactive)
    (let ((file-name (buffer-file-name)))
      (if (and (fboundp 'tramp-tramp-file-p)
               (tramp-tramp-file-p file-name))
          (error "Cannot open tramp file")
        (browse-url (concat "file://" file-name)))))

  (defun shan/call-keymap (map &optional prompt)
    "Read a key sequence and call the command it's bound to in MAP."
    (let* ((help-form `(describe-bindings ,(vector map)))
           (key (read-key-sequence prompt))
           (cmd (lookup-key map key t)))
      (if (functionp cmd) (call-interactively cmd)
        (user-error "%s is undefined" key))))

  (defun shan/exec-call-keymap (keymap prompt)
    "Executes `shan/call-keymap'"
    (interactive)
    (shan/call-keymap keymap prompt))
#+END_SRC

** General Variables

Variables based on environment, some packages are reliant on these, so it goes on top.

#+BEGIN_SRC emacs-lisp
  (defconst shan/config-path (concat user-emacs-directory "config.org"))
  (defconst shan/python-executable "python3")
  (defconst shan/ipython-executable "ipython3")
  (defconst shan/cl-executable (shan/find-executables ("sbcl" "lisp" "ccl")))
  (setq shan/home-row
        (if (string-equal (system-name) "faux-thunkpad")
            '(?a ?r ?s ?t ?n ?e ?i ?o)
          '(?a ?s ?d ?f ?j ?k ?l ?\;)))
#+END_SRC

* Initialization

** Garbage Collection

Dangerous stuff, tangled off because it's kind of unpredictable.

#+BEGIN_SRC emacs-lisp :tangle off
  (eval-and-compile
    (defun srs|revert-gc ()
      (setq gc-cons-threshold 16777216
            gc-cons-percentage 0.1
            file-name-handler-alist last-file-name-handler-alist))

    (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6
          file-name-handler-alist nil)

    (add-hook 'emacs-startup-hook 'srs|revert-gc))
#+END_SRC

** Package Archives

Special commands, should always be needed.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  ;; (setq package-enable-at-startup nil)
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC

Set up all the archive sources to pull from packages from.

#+BEGIN_SRC emacs-lisp
  (shan/add-list-to-list 'package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                                             ("melpa" . "http://melpa.org/packages/")
                                             ("melpa-stable" . "http://stable.melpa.org/packages/")
                                             ("melpa-stable2" . "http://melpa-stable.milkbox.net/packages/")
                                             ("org" . "https://orgmode.org/elpa/"))
                         t)
  (package-initialize)
#+END_SRC

These are my personal archives. Tangled off since they're not needed, but in the dire
cases when a mirror is down, first clone [[https://github.com/kkhan01/emacs-packages-mirrors][this repository]] and run the =rsync.sh= script.
Then, remove the =:tangle off= flag here and change the links to be relative to the cloned
repository. And maybe comment out the repositories above this as well.

#+BEGIN_SRC emacs-lisp :tangle off
  (setq package-archives
        `(("gnu"   . ,("~/emacs-packages-mirror/gnu/"))
          ("melpa" . ,("~/emacs-packages-mirror/melpa/"))
          ("org"   . ,("~/emacs-packages-mirror/org/"))))
  (package-initialize)
#+END_SRC

** Package Installers

[[https://github.com/jwiegley/use-package][use-package]] configuration. Helps clean up rest of the configuration and speeds up startup
by isolating packages. The [[https://github.com/larstvei/Try][try]] package lets you try packages before installing them.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (use-package use-package
    :config
    (setq-default use-package-always-defer nil
                  use-package-always-ensure t
                  use-package-always-demand t))

  (setq-default byte-compile-warnings nil)

  (use-package use-package-ensure-system-package)

  (use-package try)
#+END_SRC

* Start Up

** Encoding

Begone utf 16!

#+BEGIN_SRC emacs-lisp
  (setq-default locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** Backups

I don't particularly need backup files, and =~= + =#= files are a pain to clean anyways.

#+BEGIN_SRC emacs-lisp
  (setq-default backup-inhibited t
                auto-save-default nil
                create-lockfiles nil
                make-backup-files nil)
#+END_SRC

** Version Specific

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 26)
    (setq-default confirm-kill-processes nil))
#+END_SRC

** Bindings

*** Personal Bindings

Personal bindings, on bottom since some are reliant on packages. I need to choose between qwerty and colemak.

#+BEGIN_SRC emacs-lisp
  ;; good for dvorak and colemak
  ;;(keyboard-translate ?\C-t ?\C-x)
  ;;(keyboard-translate ?\C-x ?\C-t)

  (define-key key-translation-map (kbd "M-t") (kbd "M-x"))
  (define-key comint-mode-map (kbd "C-l") #'comint-clear-buffer)

  (use-package bind-key)
  (bind-key* "C-x w" 'shan/delete-window)
  (bind-key* "C-x k" 'shan/delete-buffer)
  (bind-key* "C-c w" 'shan/split-window-right)

  (bind-key* "C-c i" 'auto-insert)
  (bind-key* "M-/" 'hippie-expand)
  (bind-key* "C-;" 'company-yasnippet)

  ;; soft wrap lines for org mode, disabled by default for org tables
  ;; we may need to remap this key later
  (global-set-key "\C-z" nil)
  (global-set-key "\C-x\C-z" nil)
  (define-key org-mode-map "\C-z" 'toggle-truncate-lines)

  ;; will set up bookmarks later.. maybe
  (global-set-key (kbd "C-c n") (lambda() (interactive)(find-file "~/.orgfiles/notes.org")))

  (global-set-key (kbd "C-c m") 'recompile)
#+END_SRC

*** Which-key

Display available keybindings in a popup.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    :bind
    ("C-h m" . which-key-show-major-mode)
    ("C-h b" . which-key-show-top-level))
#+END_SRC

*** KeyChords

#+BEGIN_SRC emacs-lisp
  (use-package use-package-chords
    :after key-chord)

  (use-package key-chord
    :custom
    (key-chord-two-keys-delay 0.05)
    :config
    (key-chord-mode t))
#+END_SRC

*** Hydra

#+BEGIN_SRC emacs-lisp
  (use-package posframe
    :preface
    (defun posframe-poshandler-frame-bottom-center (info)
      (cons (/ (- (plist-get info :parent-frame-width)
                  (plist-get info :posframe-width))
               2)
            (- -60
               (plist-get info :mode-line-height)
               (plist-get info :minibuffer-height)))))

  (use-package hydra
    :after posframe
    :preface
    (defun hydra-posframe--hotfix (&rest _)
      (posframe-funcall
       " *hydra-posframe*"
       (lambda ()
         (fit-frame-to-buffer (selected-frame) nil
                              (+ (count-lines (point-min) (point-max)) 1)
                              nil nil)
         (redirect-frame-focus (selected-frame) (frame-parent (selected-frame))))))
    :custom
    (hydra--work-around-dedicated nil)
    (hydra-posframe-show-params
     (list
      :internal-border-width 0
      :background-color "#1c1e24"
      :poshandler 'posframe-poshandler-frame-bottom-center))
    (hydra-hint-display-type 'lv)
    :chords
    ("ao" . hydra-leader/body)
    :config
    (advice-add 'hydra-posframe-show :after #'hydra-posframe--hotfix))

  (use-package pretty-hydra
    :after hydra)
#+END_SRC

*** Hydra Map

#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-config (:exit t :color amaranth :title " Personal" :quit-key "q")
    (" Configuration"
     (("e" shan/edit-config "config file")
      ("r" shan/reload "reload")
      ("g" shan/refresh-buffer "refresh buffer"))
     " Elfeed"
     ()
     " Exit"
     (("<deletechar>" save-buffers-kill-terminal "quit emacs")
      ("DEL" hydra-leader/body (propertize "+leader" 'face 'bold)))))

  (pretty-hydra-define hydra-help (:exit t :color amaranth :title " Help" :quit-key "q")
    ("Bindings"
     (("b" counsel-descbinds "all")
      ("m" which-key-show-major-mode "major mode"))
     "Describes"
     (("f" counsel-describe-function "function")
      ("k" describe-key "key")
      ("v" counsel-describe-variable "variable"))
     "Others"
     (("F" counsel-describe-face "face")
      ("l" view-lossage "command history"))
     " Exit"
     (("DEL" hydra-leader/body (propertize "+leader" 'face 'bold)))))

  (pretty-hydra-define hydra-projectile (:exit t :color amaranth :title " Projectile" :quit-key "q")
    (""
     (("a" projectile-find-other-file "find other file")
      ("b" projectile-switch-to-buffer "switch buffer")
      ("c" projectile-compile-project "compile")
      ("d" projectile-find-dir "find directory"))
     ""
     (("e" projectile-recentf "recent files")
      ("f" projectile-find-file "find file")
      ("g" projectile-grep "grep")
      ("k" projectile-kill-buffers "kill project buffers"))
     ""
     (("p" projectile-switch-project "switch project")
      ("t" projectile-toggle-between-implementation-and-test "impl ↔ test")
      ("v" projectile-vc "version control"))
     " Exit"
     (("DEL" hydra-leader/body (propertize "+leader" 'face 'bold)))))

  (pretty-hydra-define hydra-avy (:exit t :color amaranth :title " Avy" :quit-key "q")
    ("Goto"
     (("c" avy-goto-char-timer "timed char")
      ("C" avy-goto-char "char")
      ("w" avy-goto-word-1 "word")
      ("W" avy-goto-word-0 "word*")
      ("l" avy-goto-line "bol")
      ("L" avy-goto-end-of-line "eol"))
     "Line"
     (("m" avy-move-line "move")
      ("k" avy-kill-whole-line "kill")
      ("y" avy-copy-line "yank"))
     "Region"
     (("M" avy-move-region "move")
      ("K" avy-kill-region "kill")
      ("Y" avy-copy-region "yank"))
     " Exit"
     (("DEL" hydra-leader/body (propertize "+leader" 'face 'bold)))))

  (pretty-hydra-define hydra-window (:exit nil :color amaranth :title " Windows" :quit-key "q")
    ("Split"
     (("2" split-window-below "below")
      ("3" split-window-right "right"))
     "Movement"
     (("b" balance-windows "balance")
      ("k" delete-window "kill" :exit t)
      ("w" other-window "move"))
     " Exit"
     (("DEL" hydra-leader/body (propertize "+leader" 'face 'bold) :exit t))))

  (pretty-hydra-define hydra-lsp (:exit t :color amaranth :title " LSP" :quit-key "q")
    ("Find"
     (("." lsp-ui-peek-find-references "find references")
      ("d" lsp-find-definition "find definition")
      ("t" lsp-find-type-definition "find type definition"))
     "Refactor"
     (("e" lsp-rename "rename symbol at point")
      ("f" lsp-format-buffer "format buffer"))
     "Show"
     (("j" lsp-ui-imenu "symbol table")
      ("l" lsp-ui-flycheck-list "error list"))
     " Exit"
     (("DEL" hydra-leader/body (propertize "+leader" 'face 'bold)))))

  (pretty-hydra-define hydra-leader (:exit t :color amaranth :title " Leader" :quit-key "q")
    (""
     (("RET" hydra-config/body (propertize "+config" 'face 'bold))
      ("SPC" shan/ide-resolve (propertize "+ide" 'face 'bold))
      ("h" hydra-help/body (propertize "+help" 'face 'bold)))
     ""
     (("f" counsel-find-file "management")
      ("p" hydra-projectile/body (propertize "+project" 'face 'bold))
      ("a" hydra-avy/body (propertize "+jump" 'face 'bold))
      ("w" hydra-window/body (propertize "+window" 'face 'bold)))
     ""
     (("u" undo "undo" :exit nil)
      ("t" counsel-M-x "M-x")
      ("c" (shan/exec-call-keymap 'Control-X-prefix "C-x") "C-x")
      ("s" save-buffer "save"))))
#+END_SRC

** GUI

You need to experience keyboard to realize keyboard master race. (fn + f10 if need be for options though)

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)

  (when (display-graphic-p)
    (menu-bar-mode 0)
    (toggle-scroll-bar 0)
    (tool-bar-mode 0))
#+END_SRC

** Appearance

*** Beacon

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :hook
    (focus-in . beacon-blink)
    :config
    (beacon-mode))
#+END_SRC

*** Cursor

#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type '(hbar . 1))
  (setq-default cursor-in-non-selected-windows nil)
#+END_SRC

*** Font

#+BEGIN_SRC emacs-lisp
  (when (member "Iosevka" (font-family-list))
    (set-face-attribute 'default nil
                        :family "Iosevka"
                        :height 110
                        :weight 'normal
                        :width 'normal))
#+END_SRC

*** Theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :if (display-graphic-p)
    :custom
    (doom-vibrant-brighter-comments t)
    (doom-vibrant-brighter-modeline t)
    :config
    (doom-themes-org-config)
    (load-theme 'doom-nova t))
#+END_SRC

*** Mode-Line

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)

  (use-package doom-modeline
    :if (display-graphic-p)
    :custom
    (doom-modeline-python-executable shan/python-executable)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-version t)
    (doom-modeline-buffer-file-name-style 'file-name)
    :config
    (doom-modeline-mode))
#+END_SRC

** Interface

*** Splash Screen

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines)

  (use-package dashboard
    :after (page-break-lines)
    :bind
    (:map dashboard-mode-map
          ("n" . widget-forward)
          ("p" . widget-backward)
          ("R" . shan/reload))
    :custom
    (dashboard-banner-logo-title
     (format ""
             (float-time (time-subtract after-init-time before-init-time))
             (length package-activated-list) gcs-done))
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-set-init-info t)
    (dashboard-center-content t)
    (dashboard-set-footer nil)

    (dashboard-set-navigator t)
    (dashboard-navigator-buttons
     `((

        (,(and (display-graphic-p)
               (all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0))
         ""
         "GH Repos"
         (lambda (&rest _) (browse-url-generic "https://github.com/kkhan01?tab=repositories")))

        (,(and (display-graphic-p)
               (all-the-icons-material "update" :height 1.2 :v-adjust -0.24))
         ""
         "Update emacs"
         (lambda (&rest _) (auto-package-update-now)))

        (,(and (display-graphic-p)
               (all-the-icons-material "autorenew" :height 1.2 :v-adjust -0.15))
         ""
         "Restart emacs"
         (lambda (&rest _) (shan/reload)))

        )))

    :config
    (setq dashboard-items '((recents  . 5)
                            ;; (bookmarks . 5)
                            ;; (projects . 5)
                            (agenda . 5)
                            ;; (registers . 5)
                            ))

    (dashboard-setup-startup-hook)
    :config
    (setq dashboard-startup-banner (if shan/settings-exist
                                       (concat user-emacs-directory shan/preferred-logo)
                                     'logo)))
#+END_SRC

*** Scratch buffer

#+BEGIN_SRC emacs-lisp
  ;;(setq-default initial-major-mode 'python-mode)
  (setq-default initial-major-mode 'lisp-interaction-mode)
  (setq initial-scratch-message nil)
#+END_SRC

*** Lines

#+BEGIN_SRC emacs-lisp
  (setq-default transient-mark-mode t
                visual-line-mode t
                indent-tabs-mode nil
                tab-width 4)

  (when (display-graphic-p)
    (global-hl-line-mode t))

  (use-package highlight-indent-guides
    :hook
    (prog-mode . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-responsive 'stack)
    (highlight-indent-guides-character ?\間))

#+END_SRC

*** Line Numbers

#+BEGIN_SRC emacs-lisp
  (use-package linum
    :ensure nil
    :if (< emacs-major-version 26)
    :hook
    (prog-mode . linum-mode)
    :custom
    (linum-format " %d ")
    :config
    (set-face-underline 'linum nil))

  (use-package display-line-numbers
    :ensure nil
    :if (>= emacs-major-version 26)
    :hook
    (prog-mode . display-line-numbers-mode)
    :custom
    ;;(display-line-numbers-type 'relative)
    (display-line-numbers-current-absolute t)
    (display-line-numbers-width 2)
    (display-line-numbers-widen t))
#+END_SRC

*** Scrolling

#+BEGIN_SRC emacs-lisp
  (setq-default scroll-margin 0
                scroll-conservatively 10000
                scroll-preserve-screen-position t
                mouse-wheel-progressive-speed nil)
#+END_SRC

*** Confirmation messages

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p (lambda (&rest _) t))
  (setq-default confirm-kill-emacs nil)
#+END_SRC

*** Bells

#+BEGIN_SRC emacs-lisp
  (setq-default visible-bell nil
                audible-bell nil
                ring-bell-function 'ignore)
#+END_SRC

** Completion Frontend

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :bind
    ([switch-to-buffer] . ivy-switch-buffer)
    (:map ivy-minibuffer-map
          ([remap xref-find-definitions] . shan/do-nothing)
          ([remap xref-find-definitions-other-frame] . shan/do-nothing)
          ([remap xref-find-definitions-other-window] . shan/do-nothing)
          ([remap xref-find-references] . shan/do-nothing)
          ([remap xref-find-apropos] . shan/do-nothing)
          ("<return>" . ivy-alt-done))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "%d/%d ")
    (ivy-height 20)
    (ivy-display-style 'fancy)
    (ivy-format-function 'ivy-format-function-line)
    (ivy-re-builders-alist
     '((t . ivy--regex-plus)))
    (ivy-initial-inputs-alist nil)
    :config
    (ivy-mode))

  (use-package counsel
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-h v" . counsel-describe-variable)
    ("C-h f" . counsel-describe-function)
    ("C-x b" . counsel-switch-buffer))

  (use-package swiper
    :bind
    ("C-s" . swiper-isearch))
#+END_SRC

*** All the Icons & Dired

[[https://github.com/domtronn/all-the-icons.el][all-the-icons]]

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :defer 0.5
    :config
    (if (eq (random 51) 1)
        (all-the-icons-install-fonts)))

  (use-package all-the-icons-ivy
    :after (all-the-icons ivy counsel counsel-projectile)
    :config
    (setq all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window
                                              ivy-switch-buffer))
    (setq all-the-icons-ivy-file-commands '(counsel-dired-jump
                                            counsel-find-file
                                            counsel-file-jump
                                            counsel-find-library
                                            counsel-git
                                            counsel-projectile-find-dir
                                            counsel-projectile-find-file
                                            counsel-recentf))
    (all-the-icons-ivy-setup))


  (use-package all-the-icons-dired
    :diminish all-the-icons-dired-mode
    :hook
    (dired-mode . all-the-icons-dired-mode))

  (setq dired-dwim-target t)

  (use-package dired-narrow
    :bind
    ("C-c C-n" . dired-narrow)
    ("C-c C-f" . dired-narrow-fuzzy)
    ("C-x C-N" . dired-narrow-regexp))

  (use-package dired-subtree
    :after (dired)
    :bind
    (:map dired-mode-map
          ("<tab>" . dired-subtree-toggle)
          ("<backtab>" . dired-subtree-cycle)))

  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)
#+END_SRC

* Programming

** General

*** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :bind
    (:map projectile-mode-map
          ("C-c p" . projectile-command-map))
    :custom
    (projectile-project-search-path '("~/Projects/"))
    ;; ignore set up: https://www.youtube.com/watch?v=qpv9i_I4jYU
    (projectile-indexing-method 'hybrid)
    (projectile-sort-order 'access-time)
    (projectile-enable-caching t)
    (projectile-require-project-root t)
    (projectile-completion-system 'ivy)
    :config
    (projectile-mode t)
    (counsel-projectile-mode))

  (use-package counsel-projectile
    :after (counsel projectile))
#+END_SRC

*** Interactive

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :hook
    (prog-mode . smartparens-mode)
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    (require 'smartparens-config))

  (use-package paren
    :config
    (show-paren-mode t))

  (use-package move-text
    :config
    (move-text-default-bindings))
#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure-system-package (git)
    :bind
    ("C-c g" . magit-status))

  ;; need help figuring this one out
  (use-package git-timemachine
    :bind
    ("C-c t" . git-timemachine))

  (use-package gitignore-mode
    :mode "\\.gitignore\\'")

  (use-package gitconfig-mode
    :mode "\\.gitconfig\\'")
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind
    ("C-/" . company-complete)
    (:map company-active-map
          ("M-/" . company-other-backend)
          ("M-n" . nil)
          ("M-p" . nil)
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous))
    :custom-face
    (company-tooltip ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-annotation ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
    (company-tooltip-mouse ((t (:background "#30343c"))))
    (company-tooltip-common ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-common-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
    (company-preview ((t (:background "#30343c"))))
    (company-preview-common ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-scrollbar-fg ((t (:background "#30343c"))))
    (company-scrollbar-bg ((t (:background "#30343c"))))
    (company-template-field ((t (:foreground "#282c34" :background "#c678dd"))))
    :custom
    (company-require-match 'never)
    (company-dabbrev-downcase nil)
    (company-tooltip-align-annotations t)
    (company-idle-delay 128)
    (company-minimum-prefix-length 128)
    :config
    (global-company-mode t))

  (use-package company-quickhelp
    :after (company)
    :config
    (company-quickhelp-mode))

  (use-package company-box
    :after (company)
    :hook
    (company-mode . company-box-mode))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :custom-face
    (flycheck-info ((t (:underline (:style line :color "#80FF80")))))
    (flycheck-warning ((t (:underline (:style line :color "#FF9933")))))
    (flycheck-error ((t (:underline (:style line :color "#FF5C33")))))
    :custom
    (flycheck-check-syntax-automatically '(mode-enabled save))
    :config
    (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00111000
              #b01111100
              #b11111110
              #b11111110
              #b11111110
              #b01111100
              #b00111000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000))
    (flycheck-define-error-level 'info
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-info
      :info-list-face 'flycheck-error-list-info)
    (flycheck-define-error-level 'warning
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-warning
      :warning-list-face 'flycheck-error-list-warning)
    (flycheck-define-error-level 'error
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-error
      :error-list-face 'flycheck-error-list-error)
    (global-flycheck-mode t))
#+END_SRC

Here we disable have to disable other checkers to use flycheck

#+BEGIN_SRC emacs-lisp
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc
                                             c/c++-clang c/c++-cppcheck
                                             c/c++-gcc))
#+END_SRC

** Misc Helpers

#+BEGIN_SRC emacs-lisp
  (use-package speed-type)

  (use-package origami)

  (use-package demangle-mode)

  (use-package modern-cpp-font-lock)

  (use-package academic-phrases)

  (use-package powerthesaurus)
#+END_SRC

** TRAMP

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :ensure nil
    :config
    ;; faster than scp
    (setq tramp-default-method "ssh")
    (add-to-list 'tramp-default-user-alist
                 '("ssh" "eniac.*.edu\\'" "Khinshan.Khan44") ;; current eniac logins
                 '(nil nil "shan")) ;; fallback login

    (setq password-cache-expiry nil)
    )

  ;; this hook makes remote projectile a little lighter
  (add-hook 'find-file-hook
            (lambda ()
              (when (file-remote-p default-directory)
                (setq-local projectile-mode-line "Projectile"))))
#+END_SRC

** Auto-IDE

Add an hydra to a list, based on a mode, which then gets resolved by  =shan/ide-resolve=

#+BEGIN_SRC emacs-lisp
  (defvar shan/ide--alist '())

  (defun shan/ide-add (mode hydra)
    (push `(,mode . ,hydra) shan/ide--alist))

  (defun shan/ide-resolve ()
    (interactive)
    (let ((hydra (alist-get major-mode shan/ide--alist)))
      (if hydra
          (funcall hydra)
        (message "IDE not found for %s" major-mode))))
#+END_SRC

** LSP

[[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] has much potential, hopefully it gets even better. For now, this configuration is great.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :custom
    (lsp-auto-guess-root t)
    (lsp-before-save-edits t)
    (lsp-enable-indentation t)
    (lsp-auto-configure nil)
    (lsp-enable-snippet nil)
    (lsp-prefer-flymake nil)
    :config
    (shan/add-list-to-list 'lsp-language-id-configuration '((python-mode . "python")
                                                            (caml-mode   . "ocaml")
                                                            (tuareg-mode . "ocaml")
                                                            (reason-mode . "ocaml")))
    (setq lsp-print-io t))

  (use-package lsp-ui
    :after (lsp-mode)
    :hook
    (lsp-mode . lsp-ui-mode)
    :bind
    (:map lsp-mode-map
          ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
          ([remap xref-find-references]  . lsp-ui-peek-find-references))
    :custom
    (lsp-ui-flycheck-enable t))

  (use-package company-lsp
    :after (company lsp-mode)
    :bind
    (:map lsp-mode-map
          ("C-/" . company-lsp))
    :custom
    (company-lsp-async t)
    (company-lsp-cache-candidates t)
    (company-lsp-enable-snippets nil)
    (company-lsp-enable-recompletion t)
    :config
    (add-to-list 'company-backends #'company-lsp))
#+END_SRC

* Languages

** C/ C++

#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure nil
    :custom
    (ccls-sem-highlight-method 'font-lock)
    (c-basic-offset 4)
    :config
    (setq c-default-style '((c++-mode  . "stroustrup")
                            (awk-mode  . "awk")
                            (java-mode . "java")
                            (other     . "k&r"))))

  (use-package ccls
    :if (executable-find "ccls")
    :after (lsp-mode)
    :hook
    ((c-mode c++-mode) . lsp)
    :config
    (shan/ide-add 'c-mode #'hydra-lsp/body)
    (shan/ide-add 'c++-mode #'hydra-lsp/body))
#+END_SRC

** Containers

*** Docker

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :mode
    (("Dockerfile'"       . dockerfile-mode)
     ("\\.Dockerfile\\'"  . dockerfile-mode))
    :init
    (progn
      (shan/copy-hooks-to text-mode-hook 'dockerfile-mode-hook)))

  ;; Emacs interface to docker
  (use-package docker)
#+END_SRC

*** Kubernetes

#+BEGIN_SRC emacs-lisp
  (use-package kubernetes
    :commands
    (kubernetes-overview))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
  (use-package cider)

  (use-package elein)
#+END_SRC

** GNU Plot

#+BEGIN_SRC emacs-lisp
  (use-package gnuplot)

  (use-package gnuplot-mode
    :mode
    ("\\.gp\\'" "\\.gnuplot\\'"))
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs\\'")
#+END_SRC

** Juypter

#+BEGIN_SRC emacs-lisp
  (use-package ein
    :mode
    (".*\\.ipynb\\'" . ein:ipynb-mode)
    :custom
    (ein:completion-backend 'ein:use-company-jedi-backends)
    (ein:use-auto-complete-superpack t))
#+END_SRC

** LaTeX

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex)

  (use-package auctex-latexmk
    :init
    (auctex-latexmk-setup))

#+END_SRC
** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :after (company)
    :mode
    (("\\.lua\\'" . lua-mode))
    :hook
    (lua-mode . company-mode))
#+END_SRC

** OCaml

#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :if (and (executable-find "ocaml") (executable-find "node") t)
    :ensure-system-package (ocaml-language-server . "npm install -g ocaml-language-server")
    :after (lsp)
    :hook
    (tuareg-mode . lsp)
    :mode
    (("\\.ml[ip]?\\'"                           . tuareg-mode)
     ("\\.mly\\'"                               . tuareg-menhir-mode)
     ("[./]opam_?\\'"                           . tuareg-opam-mode)
     ("\\(?:\\`\\|/\\)jbuild\\(?:\\.inc\\)?\\'" . tuareg-jbuild-mode)
     ("\\.eliomi?\\'"                           . tuareg-mode))
    :custom
    (tuareg-match-patterns-aligned t)
    (tuareg-indent-align-with-first-arg t)
    :config
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection '("ocaml-language-server" "--stdio"))
                      :major-modes '(caml-mode tuareg-mode reason-mode)
                      :server-id 'ocamlmerlin-lsp))
    (shan/ide-add 'tuareg-mode #'hydra-lsp/body))
#+END_SRC

** pkgbuilds

#+BEGIN_SRC emacs-lisp
  (use-package pkgbuild-mode
    :mode
    (("/PKGBUILD/" . pkgbuild-mode)))
#+END_SRC

** PlantUML

#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :if (file-exists-p "/usr/share/java/plantuml/plantuml.jar")
    :mode
    ("\\.\\(plant\\)?uml\\'" . plantuml-mode)
    :custom
    (plantuml-default-exec-mode 'jar)
    (plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
    (plantuml-java-options "")
    (plantuml-output-type "png")
    (plantuml-options "-charset UTF-8"))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (use-package pip-requirements
    :mode
    ("requirements\\.txt" . pip-requirements-mode)
    :init
    (progn
      (shan/copy-hooks-to text-mode-hook 'pip-requirements-mode)))

  (use-package python
    :ensure nil
    :if (executable-find "pyls")
    :after (lsp)
    :hook
    (python-mode . lsp)
    :custom
    (python-indent 4)
    (python-shell-interpreter shan/python-executable)
    (python-fill-docstring-style 'pep-257)
    (gud-pdb-command-name (concat shan/python-executable " -m pdb"))
    (py-split-window-on-execute t)
    :config
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection "pyls")
                      :major-modes '(python-mode)
                      :server-id 'pyls))
    (shan/ide-add 'python-mode #'hydra-lsp/body))

  (use-package cython-mode)
  (use-package flycheck-cython)
#+END_SRC

** R & Julia

#+BEGIN_SRC emacs-lisp
  (use-package ess
    :pin melpa-stable
    :mode
    ("\\.[rR]\\'" . R-mode)
    :config
    (require 'ess-site))
#+END_SRC

** Theorem Provers

*** Lean Prover

Install lean using [[https://github.com/leanprover/lean/blob/master/doc/make/index.md][generic build instructions]] (don't worry about warnings or anything).
Next copy the binaries (eg =lean= in =lean/bin=) to =/usr/local/bin= and copy the entire lean
folder (repo?) to =/usr/local/lib=. Restart (terminal/ emacs)and everything should work
fine.

#+BEGIN_SRC emacs-lisp
  (use-package lean-mode
    :if (executable-find "lean")
    :mode
    ("\\.lean\\'" . lean-mode)
    :bind (:map lean-mode-map
                ("S-SPC" . company-complete))
    :init
    (setq lean-rootdir "/usr/local/"))
#+END_SRC

** Web Development

*** HTML, CSS and friends

Learn about web-mode: http://web-mode.org/

emmet-mode cheatsheet: https://docs.emmet.io/cheatsheet-a5.pdf

#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :hook
    (js-mode . prettier-js-mode)
    :custom
    (prettier-js-args '("--print-width" "100"
                        "--trailing-comma" "all")))

  (use-package web-mode
    :mode
    (("\\.html?\\'"       . web-mode)
     ("\\.phtml\\'"       . web-mode)
     ("\\.tpl\\.php\\'"   . web-mode)
     ("\\.blade\\.php\\'" . web-mode)
     ("\\.php$"           . my/php-setup)
     ("\\.[agj]sp\\'"     . web-mode)
     ("\\.as[cp]x\\'"     . web-mode)
     ("\\.erb\\'"         . web-mode)
     ("\\.mustache\\'"    . web-mode)
     ("\\.djhtml\\'"      . web-mode)
     ("\\.jsx\\'"         . web-mode)
     ("\\.tsx\\'"         . web-mode))
    :config
    ;; Highlight the element under the cursor.
    (setq-default web-mode-enable-current-element-highlight t)
    (eval-after-load "web-mode"
      '(set-face-background 'web-mode-current-element-highlight-face "LightCoral"))
    :custom
    (web-mode-attr-indent-offset 2)
    (web-mode-block-padding 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-comment-style 2)
    (web-mode-enable-current-element-highlight t)
    (web-mode-markup-indent-offset 2))

  (use-package emmet-mode
    :hook
    ((css-mode  . emmet-mode)
     (php-mode  . emmet-mode)
     (sgml-mode . emmet-mode)
     (rjsx-mode . emmet-mode)
     (web-mode  . emmet-mode)))

  (use-package less-css-mode
    :mode "\\.less\\'")
#+END_SRC

*** Tide

#+BEGIN_SRC emacs-lisp
  (defun setup-tide-mode ()
    "Setup tide for javascript."
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))

  (use-package tide
    :after
    (typescript-mode company flycheck)
    :hook
    ((typescript-mode . tide-setup)
     (typescript-mode . tide-hl-identifier-mode)
     (before-save     . tide-format-before-save))
    :config
    (flycheck-add-next-checker 'typescript-tide 'javascript-eslint)
    (flycheck-add-next-checker 'tsx-tide 'javascript-eslint))
#+END_SRC

*** JavaScript

#+BEGIN_SRC emacs-lisp
  (use-package eslint-fix)

  (use-package js2-mode
    :mode
    ("\\.js\\'" . js2-mode)
    :interpreter
    ("node" . js2-mode)
    :hook
    (js2-mode . js2-imenu-extras-mode)
    :init
    (setq js2-strict-missing-semi-warning t
          js2-missing-semi-one-line-override t
          js2-mode-show-parse-errors t
          js2-mode-show-strict-warnings t))

  (use-package rjsx-mode
    :mode
    (("\\.js\\'"   . rjsx-mode)
     ("\\.jsx\\'"  . rjsx-mode)
     ("\\.json\\'" . javascript-mode))
    :hook
    (rjsx-mode . setup-tide-mode)
    :magic ("/\\*\\* @jsx React\\.DOM \\*/" "^import React")
    :init
    (setq-default rjsx-basic-offset 2)
    (setq-default rjsx-global-externs '("module" "require" "assert" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__d\
          irname" "console" "JSON")))
#+END_SRC

*** React

#+BEGIN_SRC emacs-lisp
  (use-package react-snippets
    :after yasnippet)
#+END_SRC

*** VueJS
#+BEGIN_SRC emacs-lisp
  (defun vuejs-api ()
    "Open VueJS API"
    (interactive)
    (browse-url-generic "https://vuejs.org/v2/api/"))

  (defun vuejs-guide ()
    "Open VueJS Guide"
    (interactive)
    (browse-url-generic "https://vuejs.org/v2/guide/"))

  (defun vuejs-style-guide ()
    "Open VueJS Style Guide"
    (interactive)
    (browse-url-generic "https://vuejs.org/v2/style-guide/"))

  (defun vuejs-cookbook ()
    "Open VueJS Cookbook"
    (interactive)
    (browse-url-generic "https://vuejs.org/v2/cookbook/"))

  (defun vuejs-examples ()
    "Open some VueJS Examples"
    (interactive)
    (browse-url-generic "https://vuejs.org/v2/examples/"))
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode
    (("\\.yml\\'"  . yaml-mode)
     ("\\.yaml\\'" . yaml-mode)))

  (use-package flycheck-yamllint
    :hook
    (flycheck-mode . flycheck-yamllint-setup))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode
    ("\\.\\(org\\|ORG\\)\\'" . org-mode)
    :ensure nil
    :hook
    (org-babel-after-execute . org-redisplay-inline-images)
    :custom
    (org-file-apps
     '((auto-mode . emacs)
       ("\\.x?html?\\'" . "/usr/bin/firefox -private-window %s")
       ("\\.pdf\\(::[0-9]+\\)?\\'" . "epdfview %s")))

    (org-directory "~/.orgfiles")
    (org-default-notes-file (concat org-directory "/notes.org"))
    (org-export-html-postamble nil)

    (org-image-actual-width 480)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-pretty-entities t)
    (org-hide-emphasis-markers t)
    (org-startup-with-inline-images t)
    (org-babel-python-command "ipython3 -i --simple-prompt")
    (org-format-latex-options (plist-put org-format-latex-options :scale 1.4))

    (org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
    (org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0.11.jar")
    :config
    (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

    (use-package ob-ipython)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((ditaa      . t)
       (dot        . t)
       (emacs-lisp . t)
       (gnuplot    . t)
       (js         . t)
       (latex      . t )
       (ocaml      . t)
       (org        . t)
       (plantuml   . t)
       (python     . t)
       (shell      . t)
       (R          . t)
       ))

    (add-to-list 'org-src-lang-modes
                 '("plantuml" . fundamental)))

  (use-package toc-org
    :after org
    :hook
    (org-mode . toc-org-enable))

  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))

  (use-package px)

  (use-package htmlize)

  (use-package ox-gfm
    :after (org))

  (use-package ox-pandoc)
#+END_SRC

* Text Editing

#+BEGIN_SRC emacs-lisp
  (setq-default require-final-newline t)
  (global-subword-mode t)
  (delete-selection-mode t)
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+END_SRC

* Text Navigation

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind
    ("C-'" . avy-goto-char-2)
    :custom
    (avy-keys shan/home-row))

  (use-package ace-window
    :bind
    ("C-x C-w" . ace-window)
    :custom
    (aw-keys shan/home-row))
#+END_SRC

* Language Augmentation

** Expand Region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind
    ("C-=" . er/expand-region))
#+END_SRC

** Yasnippet

*** basic

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (use-package yasnippet-snippets)
    (yas-global-mode 1))
#+END_SRC

*** auto-yasnippet

#+BEGIN_SRC emacs-lisp :tangle off
  (use-package auto-yasnippet)
#+END_SRC

** Spell Checking

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :hook
    ((text-mode . flyspell-mode)
     (prog-mode . flyspell-prog-mode)))

  (use-package flyspell-popup
    :after (flyspell)
    :preface
    ;; move point to previous error
    ;; based on code by hatschipuh at
    ;; http://emacs.stackexchange.com/a/14912/2017
    (defun flyspell-goto-previous-error (arg)
      "Go to arg previous spelling error."
      (interactive "p")
      (while (not (= 0 arg))
        (let ((pos (point))
              (min (point-min)))
          (if (and (eq (current-buffer) flyspell-old-buffer-error)
                   (eq pos flyspell-old-pos-error))
              (progn
                (if (= flyspell-old-pos-error min)
                    ;; goto beginning of buffer
                    (progn
                      (message "Restarting from end of buffer")
                      (goto-char (point-max)))
                  (backward-word 1))
                (setq pos (point))))
          ;; seek the next error
          (while (and (> pos min)
                      (let ((ovs (overlays-at pos))
                            (r '()))
                        (while (and (not r) (consp ovs))
                          (if (flyspell-overlay-p (car ovs))
                              (setq r t)
                            (setq ovs (cdr ovs))))
                        (not r)))
            (backward-word 1)
            (setq pos (point)))
          ;; save the current location for next invocation
          (setq arg (1- arg))
          (setq flyspell-old-pos-error pos)
          (setq flyspell-old-buffer-error (current-buffer))
          (goto-char pos)
          (if (= pos min)
              (progn
                (message "No more miss-spelled word!")
                (setq arg 0))
            (forward-word)))))

    (defun shan/flyspell-next-word()
      "Jump to next miss-pelled word and pop-up correction"
      (interactive)
      (flyspell-goto-next-error)
      (flyspell-popup-correct))

    (defun shan/flyspell-prev-word()
      "Jump to prev miss-pelled word and pop-up correction"
      (interactive)
      (flyspell-goto-previous-error (char-after 1))
      (flyspell-popup-correct))
    :bind
    (:map flyspell-mode-map
          ("C-,"   . shan/flyspell-next-word)
          ("C-M-," . shan/flyspell-prev-word)))
#+END_SRC

* Community

** Browser

Control how links and browser-url-generic function works (also for links).

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-args '("-private")
        browse-url-firefox-program "firefox"
        browse-url-generic-program "firefox")

  (defun browse-lucky (start end)
    (interactive "r")
    (let ((q (buffer-substring-no-properties start end)))
      (browse-url-generic (concat "http://www.google.com/search?btnI&q="
                                  (url-hexify-string q)))))
#+END_SRC

** Discord

Discord rich presence based on emacs + file editing. (tangle off so one doesn't get distracted)

#+BEGIN_SRC emacs-lisp :tangle off
  (use-package elcord
    :if (executable-find "discord")
    :custom
    (elcord-use-major-mode-as-main-icon t)
    :config
    (elcord-mode))
#+END_SRC

** Elfeed

#+BEGIN_SRC emacs-lisp
  (defun shan/elfeed-sync-database ()
    "Wrapper to load the elfeed db from disk and update it"
    (interactive)
    (elfeed-db-load)
    (elfeed-update))

  (defun shan/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (shan/elfeed-sync-database)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun bjm/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

  (defun elfeed-mark-all-as-read ()
    (interactive)
    (mark-whole-buffer)
    (elfeed-search-untag-all-unread))

  (defun shan/elfeed-show-bookmark-tag (bookmark-tag)
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump bookmark-tag))

  (defalias 'elfeed-toggle-star
    (elfeed-expose #'elfeed-search-toggle-all 'star))

  (use-package elfeed
    :bind
    (:map elfeed-search-mode-map
          ("q" . shan/elfeed-save-db-and-bury)
          ("Q" . shan/elfeed-save-db-and-bury)
          ("m" . elfeed-toggle-star)
          ("M" . elfeed-toggle-star))
    :custom
    (elfeed-db-directory shan/elfeed-db))

  (use-package elfeed-org
    :custom
    (rmh-elfeed-org-files (list shan/elfeed-file))
    :config
    (elfeed-org))
#+END_SRC

** Mirrors

#+BEGIN_SRC emacs-lisp
  (use-package elpa-mirror
    :custom
    (elpamr-default-output-directory "~/.emacs.d/emacs-packages-mirrors"))
#+END_SRC

** Wakatime

Monitor my  coding activity.

#+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode
    :if shan/settings-exist
    :custom
    (wakatime-cli-path "/usr/bin/wakatime")
    :init
    (global-wakatime-mode))
#+END_SRC
