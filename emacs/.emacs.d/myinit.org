#+TITLE: An Emacs Configuration
#+AUTHOR: Khinshan Khan
#+STARTIP: overview

* Table of Contents                                                     :TOC:
- [[#personal-variables][Personal Variables]]
- [[#garbage-collection][Garbage Collection]]
- [[#encoding][Encoding]]
- [[#backups][Backups]]
- [[#basic-package][Basic package]]
- [[#functions][Functions]]
  - [[#definitions][Definitions]]
- [[#custom-variables][Custom Variables]]
- [[#system][System]]
- [[#gui][GUI]]
- [[#appearance][Appearance]]
  - [[#beacon][Beacon]]
  - [[#cursor][Cursor]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
- [[#interface][Interface]]
  - [[#splash-screen][Splash Screen]]
  - [[#scratch-buffer][Scratch buffer]]
  - [[#lines][Lines]]
  - [[#line-numbers][Line Numbers]]
  - [[#scrolling][Scrolling]]
  - [[#confirmation-messages][Confirmation messages]]
  - [[#bells][Bells]]
- [[#completion-frontend][Completion Frontend]]
  - [[#all-the-icons--dired][All the Icons & Dired]]
- [[#org][Org]]
- [[#programming][Programming]]
  - [[#general][General]]
  - [[#git][Git]]
  - [[#company][Company]]
  - [[#flycheck][Flycheck]]
  - [[#misc-helpers][Misc Helpers]]
  - [[#tramp][TRAMP]]
- [[#languages][Languages]]
  - [[#c-c][C/ C++]]
  - [[#clojure][Clojure]]
  - [[#gnu-plot][GNU Plot]]
  - [[#haskell][Haskell]]
  - [[#lua][Lua]]
  - [[#ocaml][OCaml]]
  - [[#python][Python]]
  - [[#juypter][Juypter]]
  - [[#latex][LaTeX]]
  - [[#pkgbuilds][pkgbuilds]]
  - [[#r--julia][R & Julia]]
  - [[#web-dev][Web Dev]]
  - [[#theorem-provers][Theorem Provers]]
- [[#text-editing][Text Editing]]
- [[#language-augmentation][Language Augmentation]]
  - [[#expand-region][Expand Region]]
  - [[#yasnippet][Yasnippet]]
  - [[#spell-checking][Spell Checking]]
- [[#text-navigation][Text Navigation]]
- [[#bindings][Bindings]]
  - [[#which-key][Which-key]]
- [[#community][Community]]
  - [[#browser][Browser]]
  - [[#discord][Discord]]
  - [[#wakatime][Wakatime]]

* Personal Variables

Me, myself, and I.

#+BEGIN_SRC emacs-lisp
  (setq-default user-full-name "Khinshan Khan"
                user-mail-address "khinshan.khan@gmail.com")
#+END_SRC

* Garbage Collection

Dangerous stuff, tangled off because it's kind of unpredictable.

#+BEGIN_SRC emacs-lisp :tangle off
  (eval-and-compile
    (defun srs|revert-gc ()
      (setq gc-cons-threshold 16777216
            gc-cons-percentage 0.1
            file-name-handler-alist last-file-name-handler-alist))

    (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6
          file-name-handler-alist nil)

    (add-hook 'emacs-startup-hook 'srs|revert-gc))
#+END_SRC

* Encoding

Begone utf 16!

#+BEGIN_SRC emacs-lisp
  (setq-default locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* Backups

I don't particularly need backup files, and =~= + =#= files are a pain to clean anyways.

#+BEGIN_SRC emacs-lisp
  (setq-default backup-inhibited t
                auto-save-default nil
                create-lockfiles nil
                make-backup-files nil)
#+END_SRC

* Basic package

Set up all the archives to pull from and use-package config. The =try= packages lets you try packages before
installing them.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  ;;(setq package-enable-at-startup nil)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("melpa-stable" . "http://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("melpa-stable2" . "http://melpa-stable.milkbox.net/packages/") t)
  (add-to-list 'package-archives
               '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (use-package use-package
    :config
    (setq-default use-package-always-defer nil
                  use-package-always-ensure t
                  use-package-always-demand t))

  (setq-default byte-compile-warnings nil)

  (use-package use-package-ensure-system-package)

  (use-package try)
#+END_SRC

* Functions

Personal functions, some packages are reliant on these, so it goes on top.

** Definitions

#+BEGIN_SRC emacs-lisp
  (defun muh/do-nothing ()
    "Do nothing."
    (interactive)
    nil)

  (defun muh/before (to-call-before f)
    "Run TO-CALL-BEFORE then run F."
    (funcall to-call-before)
    (funcall f))

  (defun muh/after (to-call-after f)
    "Run F then run TO-CALL-AFTER."
    (funcall f)
    (funcall to-call-after))

  (defun muh/split-window-right ()
    "Create a new window split to the right and balance the windows."
    (interactive)
    (muh/after #'balance-windows #'split-window-right))

  (defun muh/split-window-below ()
    "Create a new window split below and balance the windows."
    (interactive)
    (muh/after #'balance-windows #'split-window-below))

  (defun muh/delete-window ()
    "Delete the current window and balance the windows."
    (interactive)
    (muh/after #'balance-windows #'delete-window))

  (defun muh/delete-buffer ()
    "Delete the current buffer and go to next most recent buffer."
    (interactive)
    (ido-kill-buffer))

  (defun muh/fill-or-unfill ()
    "Fill or unfill based on the previous command."
    (interactive)
    (let ((fill-column
           (if (eq last-command 'endless/fill-or-unfill)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

  (defun muh/refresh-buffer ()
    "Refresh the current buffer."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (defun muh/reload ()
    "Reload the configuration file."
    (interactive)
    (load-file (concat user-emacs-directory "init.el")))

  (defun muh/edit-config ()
    "Reload the configuration file."
    (interactive)
    (find-file
     (concat user-emacs-directory "myinit.org")))

  (defun muh/sudo-edit (file-name)
    "Like find file, but opens the file as root."
    (interactive "FSudo Find File: ")
    (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
      (find-file tramp-file-name)))

  (defun muh/toggle-mark ()
    "Pop a mark if one doesn't exist already, deactivate it otherwise."
    (interactive)
    (if (region-active-p)
        (deactivate-mark)
      (push-mark nil nil t)))

  (defun muh/toggle-mark-rectangle ()
    "Pop a rectangle mark if one doesn't exist already, deactivate it otherwise."
    (interactive)
    (if (region-active-p)
        (deactivate-mark)
      (rectangle-mark-mode)))

  (defun muh/first-occurence (f list)
    "Return the first occurence in LIST which, when applied to PREDICATE returns t."
    (let ((head (car list))
          (tail (cdr list)))
      (if (or (not head) (funcall f head))
          head
        (muh/first-occurence f tail))))

  (defun muh/last-occurence (predicate list)
    "Return the last occurence in LIST which, when applied to PREDICATE returns t."
    (muh/first-occurence predicate (reverse list)))

  (defmacro muh/find-executables (list)
    "Return the first occurence in LIST whose value corresponds to an executable."
    (muh/first-occurence #'executable-find list))

  (defun muh/save-proper ()
    "Save the current buffer and remove trailing whitespace if called interactively."
    (interactive)
    (remove-hook 'before-save-hook #'delete-trailing-whitespace)
    (save-buffer)
    (add-hook 'before-save-hook #'delete-trailing-whitespace))

  (defun muh/ecmd-output (cmd &optional arg)
    "Takes in an elisp command and checks if it has a valid string output when ran.
                    Arguments are optional, should the command require them. It should be noted that
                    if the command returns a string with bad input, this function still returns t."
    (if (stringp arg)
        (not (= (length
                 (funcall cmd arg)) 0))
      (not (= (length
               (funcall cmd)) 0))))

  ;; this is going to get abused, since indices should evaluate to t
  (defun muh/sso(cmd arg)
    "substring-shell-output, checks if running a given command has a substring in
                  it, and returns its index or nil"
    (cl-search arg (shell-command-to-string cmd)))

  ;; macros to potentially give use-package more control to the user
  (defmacro muh/ensure-dispatch (expr)
    (if (stringp expr)
        `'(t . ,expr)
      `',expr))

  (defmacro muh/if (predicate then &optional else)
    (if (eval predicate) `(muh/ensure-dispatch ,then) (or `(muh/ensure-dispatch ,else) ''ls)))

  (defmacro muh/unless (predicate then &optional else)
    (if (eval (not predicate)) `(muh/ensure-dispatch ,then) (or `(muh/ensure-dispatch ,else) ''ls)))
#+END_SRC

* Custom Variables

Variables based on environment, some packages are reliant on these, so it goes on top.

#+BEGIN_SRC emacs-lisp
  (defconst custom-file "/dev/zero")
  (defconst muh/config-path (concat user-emacs-directory "config.org"))
  (defconst muh/python-executable "python3")
  (defconst muh/ipython-executable "ipython3")
  (defconst muh/cl-executable (muh/find-executables ("sbcl" "lisp" "ccl")))
#+END_SRC

* System

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 26)
    (setq-default confirm-kill-processes nil))
#+END_SRC

* GUI

You need to experience keyboard to realize keyboard master race. (fn + f10 if need be for options though)

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (menu-bar-mode 0)
  (toggle-scroll-bar 0)
  (tool-bar-mode 0)
#+END_SRC

* Appearance

** Beacon

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :hook
    (focus-in . beacon-blink)
    :config
    (beacon-mode))
#+END_SRC

** Cursor

#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type '(hbar . 1))
  (setq-default cursor-in-non-selected-windows nil)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  (when (member "Iosevka" (font-family-list))
    (set-face-attribute 'default nil
                        :family "Iosevka"
                        :height 110
                        :weight 'normal
                        :width 'normal))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (doom-themes-org-config)
    (load-theme 'doom-nord t))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)

  (use-package doom-modeline
    :custom
    (doom-modeline-python-executable muh/python-executable)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-version t)
    :config
    (doom-modeline-mode))
#+END_SRC

* Interface

** Splash Screen

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines)

  (use-package dashboard
    :after (page-break-lines)
    :bind
    (:map dashboard-mode-map
          ("n" . widget-forward)
          ("p" . widget-backward)
          ("R" . muh/reload))
    :custom
    (dashboard-banner-logo-title
     (format ""
             (float-time (time-subtract after-init-time before-init-time))
             (length package-activated-list) gcs-done))
    (dashboard-startup-banner 'logo)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-set-init-info t)
    (dashboard-center-content t)
    (dashboard-set-footer nil)

    (dashboard-set-navigator t)
    (dashboard-navigator-buttons
     `((

        (,(and (display-graphic-p)
               (all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0))
         ""
         "GH Repos"
         (lambda (&rest _) (browse-url-generic "https://github.com/kkhan01?tab=repositories")))

        (,(and (display-graphic-p)
               (all-the-icons-material "update" :height 1.2 :v-adjust -0.24))
         ""
         "Update emacs"
         (lambda (&rest _) (auto-package-update-now)))

        (,(and (display-graphic-p)
               (all-the-icons-material "autorenew" :height 1.2 :v-adjust -0.15))
         ""
         "Restart emacs"
         (lambda (&rest _) (muh/reload)))

        )))

    :config
    (setq dashboard-items '((recents  . 5)
                            ;; (bookmarks . 5)
                            ;; (projects . 5)
                            (agenda . 5)
                            ;; (registers . 5)
                            ))

    (dashboard-setup-startup-hook))
#+END_SRC

** Scratch buffer

#+BEGIN_SRC emacs-lisp
  ;;(setq-default initial-major-mode 'python-mode)
  (setq-default initial-major-mode 'lisp-interaction-mode)
  (setq initial-scratch-message nil)
#+END_SRC

** Lines

#+BEGIN_SRC emacs-lisp
  (setq-default transient-mark-mode t
                visual-line-mode t
                indent-tabs-mode nil
                tab-width 4)

  (global-hl-line-mode 1)
#+END_SRC

** Line Numbers

#+BEGIN_SRC emacs-lisp
  (use-package linum
    :ensure nil
    :if (< emacs-major-version 26)
    :hook
    (prog-mode . linum-mode)
    :custom
    (linum-format " %d ")
    :config
    (set-face-underline 'linum nil))

  (use-package display-line-numbers
    :ensure nil
    :if (>= emacs-major-version 26)
    :hook
    (prog-mode . display-line-numbers-mode)
    :custom
    ;;(display-line-numbers-type 'relative)
    (display-line-numbers-current-absolute t)
    (display-line-numbers-width 2)
    (display-line-numbers-widen t))
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
  (setq-default scroll-margin 0
                scroll-conservatively 10000
                scroll-preserve-screen-position t
                mouse-wheel-progressive-speed nil)
#+END_SRC

** Confirmation messages

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p (lambda (&rest _) t))
  (setq-default confirm-kill-emacs nil)
#+END_SRC

** Bells

#+BEGIN_SRC emacs-lisp
  (setq-default visible-bell nil
                audible-bell nil
                ring-bell-function 'ignore)
#+END_SRC

* Completion Frontend

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :bind
    ([switch-to-buffer] . ivy-switch-buffer)
    (:map ivy-minibuffer-map
          ([remap xref-find-definitions] . muh/do-nothing)
          ([remap xref-find-definitions-other-frame] . muh/do-nothing)
          ([remap xref-find-definitions-other-window] . muh/do-nothing)
          ([remap xref-find-references] . muh/do-nothing)
          ([remap xref-find-apropos] . muh/do-nothing)
          ("<return>" . ivy-alt-done))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "%d/%d ")
    (ivy-height 20)
    (ivy-display-style 'fancy)
    (ivy-format-function 'ivy-format-function-line)
    (ivy-re-builders-alist
     '((t . ivy--regex-plus)))
    (ivy-initial-inputs-alist nil)
    :config
    (ivy-mode))

  (use-package counsel
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-h v" . counsel-describe-variable)
    ("C-h f" . counsel-describe-function)
    ("C-x b" . counsel-ibuffer))

  (use-package swiper
    :bind
    ("C-s" . swiper-isearch))
#+END_SRC

** All the Icons & Dired

#+BEGIN_SRC emacs-lisp
  ;; https://github.com/domtronn/all-the-icons.el
  (use-package all-the-icons
    :defer 0.5
    :config
    ;; remember to refresh ocassionally, not sure if i want this to stay
    (if (eq (random 51) 1)
        (all-the-icons-install-fonts)))

  (use-package all-the-icons-ivy
    :after (all-the-icons ivy counsel counsel-projectile)
    :config
    (setq all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window
                                              ivy-switch-buffer))
    (setq all-the-icons-ivy-file-commands '(counsel-dired-jump
                                            counsel-find-file
                                            counsel-file-jump
                                            counsel-find-library
                                            counsel-git
                                            counsel-projectile-find-dir
                                            counsel-projectile-find-file
                                            counsel-recentf))
    (all-the-icons-ivy-setup))


  (use-package all-the-icons-dired
    :diminish all-the-icons-dired-mode
    :init
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  ;; https://fuco1.github.io/2017-07-15-Collapse-unique-nested-paths-in-dired-with-dired-collapse-mode.html
  ;; (use-package dired-collapse
  ;;   :init
  ;;   (add-hook 'dired-mode-hook 'dired-collapse-mode))

  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode
    ("\\.\\(org\\|ORG\\)\\'" . org-mode)
    :ensure nil
    :hook
    (org-babel-after-execute . org-redisplay-inline-images)
    :custom
    (org-file-apps
     '((auto-mode . emacs)
       ("\\.x?html?\\'" . "/usr/bin/firefox -private-window %s")
       ("\\.pdf\\(::[0-9]+\\)?\\'" . "epdfview %s")))

    (org-directory "~/.orgfiles")
    (org-default-notes-file (concat org-directory "/notes.org"))
    (org-export-html-postamble nil)

    (org-image-actual-width 480)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-pretty-entities t)
    (org-hide-emphasis-markers t)
    (org-startup-with-inline-images t)
    (org-babel-python-command "ipython3 -i --simple-prompt")
    (org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
    :config
    (use-package ob-ipython)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (gnuplot . t)
       (js . t)
       (latex . t )
       (ocaml . t)
       (org . t)
       (python . t)
       (shell . t)
       (R . t)
       )))

  (use-package toc-org
    :after org
    :hook
    (org-mode . toc-org-enable))

  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))

  (use-package px)

  (use-package htmlize)

  (use-package ox-gfm
    :after (org))

  (use-package ox-pandoc)
#+END_SRC

* Programming

** General

*** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :bind
    (:map projectile-mode-map
          ("C-c p" . projectile-command-map))
    :custom
    (projectile-project-search-path '("~/Projects/"))
    ;; ignore set up: https://www.youtube.com/watch?v=qpv9i_I4jYU
    (projectile-indexing-method 'hybrid)
    (projectile-sort-order 'access-time)
    (projectile-enable-caching t)
    (projectile-require-project-root t)
    (projectile-completion-system 'ivy)
    :config
    (projectile-mode t)
    (counsel-projectile-mode))

  (use-package counsel-projectile
    :after (counsel projectile))
#+END_SRC

#+RESULTS:

*** Interactive

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :hook
    (prog-mode . smartparens-mode)
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    (require 'smartparens-config))

  (use-package paren
    :config
    (show-paren-mode t))

  (use-package move-text
    :config
    (move-text-default-bindings))
#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    ("C-c g" . magit-status))

  ;; need help figuring this one out
  (use-package git-timemachine
    :bind
    ("C-c t" . git-timemachine))

  (use-package gitignore-mode
    :mode "\\.gitignore\\'")

  (use-package gitconfig-mode
    :mode "\\.gitconfig\\'")
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind
    ("C-/" . company-complete)
    (:map company-active-map
          ("C-/" . company-other-backend)
          ("M-n" . nil)
          ("M-p" . nil)
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous))
    :custom-face
    (company-tooltip ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-annotation ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
    (company-tooltip-mouse ((t (:background "#30343c"))))
    (company-tooltip-common ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-common-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
    (company-preview ((t (:background "#30343c"))))
    (company-preview-common ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-scrollbar-fg ((t (:background "#30343c"))))
    (company-scrollbar-bg ((t (:background "#30343c"))))
    (company-template-field ((t (:foreground "#282c34" :background "#c678dd"))))
    :custom
    (company-require-match 'never)
    (company-dabbrev-downcase nil)
    (company-tooltip-align-annotations t)
    (company-idle-delay 128)
    (company-minimum-prefix-length 128)
    :config
    (global-company-mode t))

  (use-package company-quickhelp
    :after (company)
    :config
    (company-quickhelp-mode))

  (use-package company-box
    :after (company)
    :hook (company-mode . company-box-mode))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :custom-face
    (flycheck-info ((t (:underline (:style line :color "#80FF80")))))
    (flycheck-warning ((t (:underline (:style line :color "#FF9933")))))
    (flycheck-error ((t (:underline (:style line :color "#FF5C33")))))
    :custom
    (flycheck-check-syntax-automatically '(mode-enabled save))
    :config
    (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00111000
              #b01111100
              #b11111110
              #b11111110
              #b11111110
              #b01111100
              #b00111000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000))
    (flycheck-define-error-level 'info
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-info
      :info-list-face 'flycheck-error-list-info)
    (flycheck-define-error-level 'warning
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-warning
      :warning-list-face 'flycheck-error-list-warning)
    (flycheck-define-error-level 'error
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-error
      :error-list-face 'flycheck-error-list-error)
    (global-flycheck-mode t))

  (use-package flycheck-clang-analyzer
    :after (flycheck)
    :config (flycheck-clang-analyzer-setup))

  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
#+END_SRC

** Misc Helpers

#+BEGIN_SRC emacs-lisp
  (use-package speed-type)

  (use-package origami)

  (use-package demangle-mode)

  (use-package modern-cpp-font-lock)

  (use-package academic-phrases)

  (use-package powerthesaurus)
#+END_SRC

** TRAMP

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :ensure nil
    :config
    ;; faster than scp
    (setq tramp-default-method "ssh")
    (add-to-list 'tramp-default-user-alist
                 '("ssh" "eniac.*.edu\\'" "Khinshan.Khan44") ;; current eniac logins
                 '(nil nil "shan")) ;; fallback login

    (setq password-cache-expiry nil)
    )

  ;; this hook makes remote projectile a little lighter
  (add-hook 'find-file-hook
            (lambda ()
              (when (file-remote-p default-directory)
                (setq-local projectile-mode-line "Projectile"))))
#+END_SRC

* Languages
** C/ C++

#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure nil
    :custom
    (cc-search-directories '("."
                             "/usr/include"
                             "usr/local/include/*"
                             "../*/include"
                             "../*/lib"))
    (c-default-style "linux")
    (c-basic-offset 4))

  (use-package ggtags
    :hook
    (c-mode . ggtags-mode)
    (c++-mode . ggtags-mode))

  (use-package irony
    :hook
    (c-mode . irony-mode)
    (c++-mode . irony-mode)
    (irony-mode . irony-cdb-autosetup-compile-options))

  (use-package company-irony
    :after
    (irony company)
    :config
    (add-to-list 'company-backends 'company-irony))

  (use-package company-c-headers
    :after (company)
    :config
    (add-to-list 'company-backends 'company-c-headers))

  (add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++14")))
  (add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++14")))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
  (use-package cider)

  (use-package elein)
#+END_SRC

** GNU Plot

#+BEGIN_SRC emacs-lisp
  (use-package gnuplot)

  (use-package gnuplot-mode
    :mode
    ("\\.gp\\'" "\\.gnuplot\\'"))
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs\\'")
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :after (company)
    :mode (("\\.lua\\'" . lua-mode))
    :hook
    (lua-mode . company-mode))
#+END_SRC

** OCaml

#+BEGIN_SRC emacs-lisp
  (use-package opam
    :init
    (opam-init))

  (use-package tuareg
    :after (company)
    :mode
    (("\\.ml[ip]?\\'" . tuareg-mode)
     ("\\.mly\\'" . tuareg-menhir-mode)
     ("[./]opam_?\\'" . tuareg-opam-mode)
     ("\\(?:\\`\\|/\\)jbuild\\(?:\\.inc\\)?\\'" . tuareg-jbuild-mode)
     ("\\.eliomi?\\'" . tuareg-mode))
    :custom
    (tuareg-match-patterns-aligned t)
    (tuareg-indent-align-with-first-arg t))

  (use-package merlin
    :if (file-exists-p "~/.emacs.d/opam-user-setup.el")
    :after
    (opam tuareg)
    :hook
    (tuareg-mode . merlin-mode)
    :bind
    (:map merlin-mode-map
          ("M-." . merlin-locate)
          ("M-," . merlin-pop-stack)
          ("M-?" . merlin-occurrences)
          ("C-c C-j" . merlin-jump)
          ("C-c C-d" . merlin-document)
          ("C-c <up>"   . merlin-type-enclosing-go-up)
          ("C-c <down>" . merlin-type-enclosing-go-down)
          ("C-c C-r" . nil))
    :custom
    (merlin-error-after-save nil)
    (merlin-completion-with-doc t)
    :config
    ;; (setq merlin-use-auto-complete-mode t)
    (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el"))

  (use-package utop
    :after (opam)
    :preface
    (defun muh/utop-eval-phrase ()
      "Eval the surrounding Caml phrase (or block) in utop."
      (interactive)
      (utop-prepare-for-eval)
      (let ((end (point)))
        (save-excursion
          (let ((triple (funcall utop-discover-phrase)))
            (utop-eval (car triple) (cdr triple))))
        (when utop-skip-after-eval-phrase
          (goto-char end)
          (funcall utop-next-phrase-beginning))))
    :hook
    (tuareg-mode . utop-minor-mode)
    :bind
    (:map tuareg-mode-map
          ("C-c C-c" . muh/utop-eval-phrase)
          ("C-c C-z" . utop))
    (:map utop-mode-map
          ("C-c C-g" . nil)
          ("C-c C-k" . nil)
          ("C-c C-s" . nil))
    :custom
    (utop-command "opam config exec -- utop -emacs")
    (utop-edit-command nil))

  (use-package dune)

  (use-package ocp-indent
    :after (tuareg utop)
    :bind
    (:map merlin-mode-map
          ("C-c C-r r" . utop-eval-region)
          ("C-c C-r f" . ocp-indent-buffer))
    :hook (tuareg-mode . ocp-indent-caml-mode-setup))

  (use-package flycheck-ocaml
    :after merlin
    :config
    (flycheck-ocaml-setup))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (use-package pip-requirements
    :mode
    ("requirements\\.txt" . pip-requirements-mode))

  (use-package sphinx-doc
    :hook
    (python-mode . sphinx-doc-mode))

  (use-package python
    :ensure nil
    :after (flycheck)
    :mode
    ("\\.py[iw]?\\'" . python-mode)
    :custom
    (python-indent 4)
    (python-shell-interpreter muh/ipython-executable)
    (python-shell-interpreter-args "--simple-prompt -i")
    (python-fill-docstring-style 'pep-257)
    (gud-pdb-command-name (concat muh/python-executable " -m pdb"))
    (py-split-window-on-execute t))

  (use-package elpy
    :after (company)
    :hook
    (python-mode . elpy-mode)
    :bind
    (:map python-mode-map
          ("C-c C-c" . elpy-shell-send-top-statement))
    :custom
    (elpy-rpc-python-command muh/python-executable)
    :config
    (delete 'elpy-module-highlight-indentation elpy-modules)
    (delete 'elpy-module-flymake elpy-modules)
    (delete 'elpy-module-company elpy-modules)
    (add-to-list 'company-backends #'elpy-company-backend)
    (elpy-enable))

  (use-package company-jedi
    :after (company)
    :config
    (add-to-list 'company-backends 'company-jedi))
#+END_SRC

** Juypter

#+BEGIN_SRC emacs-lisp
  (use-package ein
    :mode
    (".*\\.ipynb\\'" . ein:ipynb-mode)
    :custom
    (ein:completion-backend 'ein:use-company-jedi-backends)
    (ein:use-auto-complete-superpack t))
#+END_SRC

** LaTeX

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex)

  (use-package auctex-latexmk
    :init
    (auctex-latexmk-setup))
#+END_SRC

** pkgbuilds

#+BEGIN_SRC emacs-lisp
  (use-package pkgbuild-mode
    :mode
    (("/PKGBUILD/" . pkgbuild-mode)))
#+END_SRC

** R & Julia

#+BEGIN_SRC emacs-lisp
  (use-package ess
    :pin melpa-stable
    :mode
    ("\\.[rR]\\'" . R-mode)
    :config
    (require 'ess-site))
#+END_SRC

** Web Dev
*** VueJS
#+BEGIN_SRC emacs-lisp
  (defun vuejs-api ()
    "Open VueJS API"
    (interactive)
    (browse-url-generic "https://vuejs.org/v2/api/"))

  (defun vuejs-guide ()
    "Open VueJS Guide"
    (interactive)
    (browse-url-generic "https://vuejs.org/v2/guide/"))

  (defun vuejs-style-guide ()
    "Open VueJS Style Guide"
    (interactive)
    (browse-url-generic "https://vuejs.org/v2/style-guide/"))

  (defun vuejs-cookbook ()
    "Open VueJS Cookbook"
    (interactive)
    (browse-url-generic "https://vuejs.org/v2/cookbook/"))

  (defun vuejs-examples ()
    "Open some VueJS Examples"
    (interactive)
    (browse-url-generic "https://vuejs.org/v2/examples/"))
#+END_SRC

** Theorem Provers

*** Lean Prover

Install lean using [[https://github.com/leanprover/lean/blob/master/doc/make/index.md][generic build instructions]] (don't worry about warnings or anything).
Next copy the binaries (eg =lean= in =lean/bin=) to =/usr/local/bin= and copy the entire lean
folder (repo?) to =/usr/local/lib=. Restart (terminal/ emacs)and everything should work
fine.

#+BEGIN_SRC emacs-lisp
  (use-package lean-mode
    :mode "\\.lean\\'"
    :bind (:map lean-mode-map
                ("S-SPC" . company-complete))
    :init (setq lean-rootdir "/usr/local/"))
#+END_SRC

* Text Editing

#+BEGIN_SRC emacs-lisp
  (setq-default require-final-newline t)
  (global-subword-mode t)
  (delete-selection-mode t)
  (add-hook 'before-save-hook #'delete-trailing-whitespace)

  (use-package highlight-indent-guides
    :hook
    (prog-mode . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-responsive 'stack)
    (highlight-indent-guides-character ?\λ))
#+END_SRC

* Language Augmentation

** Expand Region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind
    ("C-=" . er/expand-region))
#+END_SRC

** Yasnippet

*** basic

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (use-package yasnippet-snippets)
    (yas-global-mode 1))
#+END_SRC

*** auto-yasnippet

#+BEGIN_SRC emacs-lisp :tangle off
  (use-package auto-yasnippet)
#+END_SRC

** Spell Checking

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :hook ((text-mode . flyspell-mode)
           (prog-mode . flyspell-prog-mode)))

  (use-package flyspell-popup
    :after (flyspell)
    :preface
    ;; move point to previous error
    ;; based on code by hatschipuh at
    ;; http://emacs.stackexchange.com/a/14912/2017
    (defun flyspell-goto-previous-error (arg)
      "Go to arg previous spelling error."
      (interactive "p")
      (while (not (= 0 arg))
        (let ((pos (point))
              (min (point-min)))
          (if (and (eq (current-buffer) flyspell-old-buffer-error)
                   (eq pos flyspell-old-pos-error))
              (progn
                (if (= flyspell-old-pos-error min)
                    ;; goto beginning of buffer
                    (progn
                      (message "Restarting from end of buffer")
                      (goto-char (point-max)))
                  (backward-word 1))
                (setq pos (point))))
          ;; seek the next error
          (while (and (> pos min)
                      (let ((ovs (overlays-at pos))
                            (r '()))
                        (while (and (not r) (consp ovs))
                          (if (flyspell-overlay-p (car ovs))
                              (setq r t)
                            (setq ovs (cdr ovs))))
                        (not r)))
            (backward-word 1)
            (setq pos (point)))
          ;; save the current location for next invocation
          (setq arg (1- arg))
          (setq flyspell-old-pos-error pos)
          (setq flyspell-old-buffer-error (current-buffer))
          (goto-char pos)
          (if (= pos min)
              (progn
                (message "No more miss-spelled word!")
                (setq arg 0))
            (forward-word)))))

    (defun muh/flyspell-next-word()
      "Jump to next miss-pelled word and pop-up correction"
      (interactive)
      (flyspell-goto-next-error)
      (flyspell-popup-correct))
    (defun muh/flyspell-prev-word()
      "Jump to prev miss-pelled word and pop-up correction"
      (interactive)
      (flyspell-goto-previous-error (char-after 1))
      (flyspell-popup-correct))
    :bind
    (:map flyspell-mode-map
          ("C-," . muh/flyspell-next-word)
          ("C-M-," . muh/flyspell-prev-word)))
#+END_SRC

* Text Navigation

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind
    ("C-'" . avy-goto-char-2)
    :custom
    (avy-keys '(?a ?r ?s ?t ?n ?e ?i ?o)))

  (use-package ace-window
    :bind
    ("C-x C-w" . ace-window)
    :custom
    (aw-keys '(?a ?r ?s ?t ?n ?e ?i ?i)))
#+END_SRC

* Bindings

Personal bindings, on bottom since some are reliant on packages. I need to choose between qwerty and colemak.

#+BEGIN_SRC emacs-lisp
  ;; good for dvorak and colemak
  ;;(keyboard-translate ?\C-t ?\C-x)
  ;;(keyboard-translate ?\C-x ?\C-t)

  (define-key key-translation-map (kbd "M-t") (kbd "M-x"))
  (define-key comint-mode-map (kbd "C-l") #'comint-clear-buffer)

  (use-package bind-key)
  (bind-key* "C-x w" 'muh/delete-window)
  (bind-key* "C-x k" 'muh/delete-buffer)
  (bind-key* "C-c w" 'muh/split-window-right)

  (bind-key* "C-c i" 'auto-insert)
  (bind-key* "M-/" 'hippie-expand)
  (bind-key* "C-;" 'company-yasnippet)

  ;; soft wrap lines for org mode, disabled by default for org tables
  ;; we may need to remap this key later
  (global-set-key "\C-z" nil)
  (global-set-key "\C-x\C-z" nil)
  (define-key org-mode-map "\C-z" 'toggle-truncate-lines)

  ;; will set up bookmarks later.. maybe
  (global-set-key (kbd "C-c n") (lambda() (interactive)(find-file "~/.orgfiles/notes.org")))

  (global-set-key (kbd "C-c m") 'recompile)
#+END_SRC

** Which-key

Display available keybindings in a popup.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    :bind
    ("C-h m" . which-key-show-major-mode)
    ("C-h b" . which-key-show-top-level))
#+END_SRC

* Community

** Browser

Control how links and browser-url-generic function works (also for links).

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-args '("--incognito")
        browse-url-generic-program "chromium")

  (defun browse-lucky (start end)
    (interactive "r")
    (let ((q (buffer-substring-no-properties start end)))
      (browse-url-generic (concat "http://www.google.com/search?btnI&q="
                                  (url-hexify-string q)))))
#+END_SRC

** Discord

Discord rich presence based on emacs + file editing. (tangled off so I don't get distracted)

#+BEGIN_SRC emacs-lisp :tangle off
  (use-package elcord
    :if (executable-find "discord")
    :custom
    (elcord-use-major-mode-as-main-icon t)
    :config
    (elcord-mode))
#+END_SRC

** Wakatime

Moniter my  coding activity.

#+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode
    :custom
    (wakatime-cli-path "/usr/bin/wakatime")
    (wakatime-api-key  "f7b49b71-33d4-42bc-82fc-42f775341ed0")
    :init
    (global-wakatime-mode))
#+END_SRC
