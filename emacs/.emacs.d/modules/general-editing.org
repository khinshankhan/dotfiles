#+STARTUP: overview
#+PRIORITIES: A D B

  #+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))

(use-package smartparens
  :hook
  (prog-mode . smartparens-mode)
  :custom
  (sp-escape-quotes-after-insert nil)
  :config
  (require 'smartparens-config))

(use-package paren
  :demand t
  :config
  (setq show-paren-when-point-in-periphery t
        show-paren-when-point-inside-paren t)
  (show-paren-mode t))

(use-package move-text
  :config
  (move-text-default-bindings))
  #+end_src

  Lifted the overlay code from Centaur Emacs (gives priority to rainbow mode). The rest makes the minor mode
  global so it's active all the time... but global rainbow may be bad for big or messy files, so watch out!

  #+begin_src emacs-lisp
(use-package rainbow-mode
  :config
  (with-no-warnings
    ;; HACK: Use overlay instead of text properties to override `hl-line' faces.
    ;; @see https://emacs.stackexchange.com/questions/36420
    (defun my-rainbow-colorize-match (color &optional match)
      (let* ((match (or match 0))
             (ov (make-overlay (match-beginning match) (match-end match))))
        (overlay-put ov 'ovrainbow t)
        (overlay-put ov 'face `((:foreground ,(if (> 0.5 (rainbow-x-color-luminance color))
                                                  "white" "black"))
                                (:background ,color)))))
    (advice-add #'rainbow-colorize-match :override #'my-rainbow-colorize-match)

    (defun my-rainbow-clear-overlays ()
      "Clear all rainbow overlays."
      (remove-overlays (point-min) (point-max) 'ovrainbow t))
    (advice-add #'rainbow-turn-off :after #'my-rainbow-clear-overlays))

  (define-globalized-minor-mode global-rainbow-mode rainbow-mode
    (lambda () (rainbow-mode 1)))
  (global-rainbow-mode 1))
  #+end_src

  I know what I'm doing, no need to hide these functions from me.

  #+begin_src emacs-lisp
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
  #+end_src

  Helpful to go through documentation in comments from other devs (or message to myself!). Stole the sane keywords
  and colors from Doom.

  #+begin_src emacs-lisp
(use-package hl-todo
  :hook
  (prog-mode . hl-todo-mode)
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
  #+end_src

  Some sensible defaults, mostly from the titular [[https://github.com/hrs/sensible-defaults.el][repo]] (a lot of it merged into Emacs though... so just some
  re-bindings). Rest is all me and what I find sane.

  #+begin_src emacs-lisp
(use-package expand-region
  :bind
  ("C-=" . er/expand-region))

(defun shan/fill-or-unfill ()
  "Fill or unfill based on the previous command."
  (interactive)
  (let ((fill-column
         (if (eq last-command 'endless/fill-or-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'fill-paragraph)))

(setq-default require-final-newline t
              vc-follow-symlinks t)

(global-subword-mode t)
(delete-selection-mode t)
(global-font-lock-mode t)
(add-hook 'before-save-hook #'delete-trailing-whitespace)

(global-set-key [remap fill-paragraph]
                #'shan/fill-or-unfill)

(global-set-key (kbd "M-;")
                'comment-line)
  #+end_src

  Navigation

  #+begin_src emacs-lisp
(use-package avy
  :bind
  ("C-'" . avy-goto-char-2)
  :custom
  (avy-keys shan--home-row))

(use-package ace-window
  :bind
  ("C-x C-w" . ace-window)
  :custom
  (aw-keys shan--home-row))
  #+end_src

  Helpful for screencasting usually. Sometimes as a sanity check on myself.

  #+begin_src emacs-lisp
(use-package command-log-mode)
  #+end_src
