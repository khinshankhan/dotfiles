#+STARTUP: overview
#+PRIORITIES: A D B

** LSP

   [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] has much potential, hopefully it gets even better. For now, this configuration is great.

   #+begin_src emacs-lisp
(use-package lsp-mode
  :custom
  (lsp-auto-guess-root t)
  (lsp-before-save-edits t)
  (lsp-enable-indentation t)
  (lsp-auto-configure t)
  (lsp-enable-snippet nil)
  (lsp-prefer-flymake nil)
  :config
  (require 'lsp-clients) ;; due to lsp-auto-configure being nil
  (setq lsp-print-io t))

(use-package lsp-ui
  :after (lsp-mode)
  :hook
  (lsp-mode . lsp-ui-mode)
  :bind
  (:map lsp-mode-map
        ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
        ([remap xref-find-references]  . lsp-ui-peek-find-references))
  :custom
  (lsp-ui-flycheck-enable t))

(use-package company-lsp
  :after (company lsp-mode)
  :bind
  (:map lsp-mode-map
        ("C-/" . company-lsp))
  :custom
  (company-lsp-async t)
  (company-lsp-cache-candidates t)
  (company-lsp-enable-snippets nil)
  (company-lsp-enable-recompletion t)
  :config
  (add-to-list 'company-backends #'company-lsp))
   #+end_src

   Great for debugging... once you learn how to use a debugger. Don't worry about eager expansion errors.

   #+begin_src emacs-lisp
(use-package dap-mode
  :after (hydra)
  :hook
  (lsp-mode . (lambda () (dap-mode t) (dap-ui-mode t)))
  ;; FIXME: super broken with straight
  ;; :config
  ;; (use-package dap-hydra
  ;;   :straight nil
  ;;   :config
  ;;   (defhydra+ dap-hydra (:exit nil :foreign-keys run)
  ;;     ("d" dap-debug "Start debug session"))
  ;;   (pretty-hydra-define+ hydra-lsp ()
  ;;     (;; these heads are added to the existing " Exit" column
  ;;      " Exit"
  ;;      (("SPC" dap-hydra "dap")))))
  )
   #+end_src

** Treemacs

   Sneaky on Dreameh.

   #+begin_src emacs-lisp
(use-package treemacs
  :bind (:map global-map
              ("C-x t t" . treemacs)
              ("C-x t 1" . treemacs-select-window))
  :config
  (setq treemacs-resize-icons 4))

(use-package lsp-treemacs
  :init (lsp-treemacs-sync-mode 1))

(use-package treemacs-projectile
  :after treemacs projectile)

(use-package treemacs-magit
  :after treemacs magit)

(use-package treemacs-icons-dired
  :after treemacs dired
  :config (treemacs-icons-dired-mode))
   #+end_src


** Projectile

   #+begin_src emacs-lisp
(use-package projectile
  :bind
  (:map projectile-mode-map
        ("C-c p" . projectile-command-map))
  :custom
  (projectile-project-search-path '("~/Projects/"))
  ;; ignore set up: https://www.youtube.com/watch?v=qpv9i_I4jYU
  (projectile-indexing-method 'hybrid)
  (projectile-sort-order 'access-time)
  (projectile-enable-caching t)
  (projectile-require-project-root t)
  (projectile-completion-system 'ivy)
  :config
  (projectile-mode t))

(use-package counsel-projectile
  :disabled
  :after
  (counsel projectile)
  :config
  (counsel-projectile-mode t)
  (defalias 'projectile-switch-to-buffer 'counsel-projectile-switch-to-buffer)
  (defalias 'projectile-find-dir 'counsel-projectile-find-dir)
  (defalias 'projectile-find-file 'counsel-projectile-find-file)
  (defalias 'projectile-grep 'counsel-projectile-grep)
  (defalias 'projectile-switch-project 'counsel-projectile-switch-project))
   #+end_src
