#+STARTUP: overview
#+PRIORITIES: A D B

** Abstract Planning

*** Artist

    #+begin_src emacs-lisp
(use-package artist
  :config
  ;; this is from emacswiki
  (defun shan/artist-ido-select-operation (type)
    "Use ido to select a drawing operation in artist-mode"
    (interactive (list (ido-completing-read "Drawing operation: "
                                            (list "Pen" "Pen Line" "line" "straight line" "rectangle"
                                                  "square" "poly-line" "straight poly-line" "ellipse"
                                                  "circle" "text see-thru" "text-overwrite" "spray-can"
                                                  "erase char" "erase rectangle" "vaporize line" "vaporize lines"
                                                  "cut rectangle" "cut square" "copy rectangle" "copy square"
                                                  "paste" "flood-fill"))))
    (artist-select-operation type))

  ;; also from emacswiki
  (defun shan/artist-ido-select-settings (type)
    "Use ido to select a setting to change in artist-mode"
    (interactive (list (ido-completing-read "Setting: "
                                            (list "Set Fill" "Set Line" "Set Erase" "Spray-size" "Spray-chars"
                                                  "Rubber-banding" "Trimming" "Borders"))))
    (if (equal type "Spray-size")
        (artist-select-operation "spray set size")
      (call-interactively (artist-fc-get-fn-from-symbol
                           (cdr (assoc type '(("Set Fill" . set-fill)
                                              ("Set Line" . set-line)
                                              ("Set Erase" . set-erase)
                                              ("Rubber-banding" . rubber-band)
                                              ("Trimming" . trimming)
                                              ("Borders" . borders)
                                              ("Spray-chars" . spray-chars))))))))

  (pretty-hydra-define hydra-artist (:exit t :color pink :title " Artist" :quit-key "q")
    ("Find"
     (("a" artist-mouse-choose-operation "touch all ops")
      ("o" shan/artist-ido-select-operation "ido ops")
      ("s" shan/artist-ido-select-settings "ido settings"))
     "Drawing"
     (("l" artist-select-op-line "line")
      ("r" artist-select-op-rectangle "rectangle")
      ("p" artist-select-op-poly-line "polyline")
      ("e" artist-select-op-ellipse "ellipse"))
     "Edit"
     (("w" artist-select-op-copy-rectangle "copy")
      ("y" artist-select-op-paste "paste")
      ("c" artist-select-op-cut-rectangle "cut")
      ("f" artist-select-op-flood-fill "flood fill"))
     " Exit"
     (("DEL" hydra-leader/body (propertize "+leader" 'face 'bold)))))

  (shan--ide-add 'picture-mode #'hydra-artist/body))
    #+end_src

*** GNU Plot

    #+begin_src emacs-lisp
(use-package gnuplot)

(use-package gnuplot-mode
  :mode
  ("\\.gp\\'" "\\.gnuplot\\'"))
    #+end_src

*** Mermaid

    #+begin_src emacs-lisp
(use-package mermaid-mode
  :if (executable-find "mmdc")
  :mode
  (("\\.mmd\\'" . mermaid-mode)
   ("\\.mermaid\\'" . mermaid-mode))
  :init
  (setq mermaid-mmdc-location (executable-find "mmdc")))
    #+end_src

*** PlantUML

    #+begin_src emacs-lisp
(use-package plantuml-mode
  :if (file-exists-p shan--plantuml-path)
  :mode
  ("\\.\\(plant\\)?uml\\'" . plantuml-mode)
  :custom
  (plantuml-default-exec-mode 'jar)
  (plantuml-jar-path shan--plantuml-path)
  (plantuml-java-options "")
  (plantuml-output-type "png")
  (plantuml-options "-charset UTF-8"))
    #+end_src

** Config/ Data

*** CSV

    #+begin_src emacs-lisp
(use-package csv-mode)
    #+end_src

*** dhall

    #+begin_src emacs-lisp
(use-package dhall-mode)
    #+end_src

*** TODO [#A] Editor Config

    Make this work

    #+begin_src emacs-lisp
(use-package editorconfig
  :hook
  ((prog-mode text-mode) . editorconfig-mode)
  :config
  (editorconfig-mode 1))
    #+end_src

*** Groovy

    #+begin_src emacs-lisp
(use-package groovy-mode
  :defer t
  :mode
  (("\\.groovy$" . groovy-mode)
   ("\\.gradle$" . groovy-mode)))
    #+end_src

*** Info

    #+begin_src emacs-lisp
(use-package info
  :mode
  ("\\.info\\'" . info-mode))
    #+end_src

*** Json

    #+begin_src emacs-lisp
(use-package json-mode
  :mode
  ("\\.json\\'" . json-mode)
  :init
  (setq-default js-indent-level 2))
    #+end_src

*** TODO Markdown

    Clean up preview and stuff.

    Slight lift off of rememberYou

    Thinking about markdown hydra

    #+begin_src emacs-lisp
(use-package markdown-mode
  :mode
  ("\\.\\(md\\|markdown\\)\\'" . markdown-mode))

(use-package markdown-preview-mode
  :if (executable-find "pandoc")
  :after (markdown-mode)
  :custom
  (markdown-command (executable-find "pandoc"))

  (markdown-preview-javascript
   (list (concat "https://github.com/highlightjs/highlight.js/"
                 "9.15.6/highlight.min.js")
         "<script>
            $(document).on('mdContentChange', function() {
              $('pre code').each(function(i, block)  {
                hljs.highlightBlock(block);
              });
            });
          </script>"))
  (markdown-preview-stylesheets
   (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
                 "3.0.1/github-markdown.min.css")
         (concat "https://github.com/highlightjs/highlight.js/"
                 "9.15.6/styles/github.min.css")

         "<style>
            .markdown-body {
              box-sizing: border-box;
              min-width: 200px;
              max-width: 980px;
              margin: 0 auto;
              padding: 45px;
            }

            @media (max-width: 767px) { .markdown-body { padding: 15px; } }
          </style>")))
    #+end_src

*** pkgbuilds

    #+begin_src emacs-lisp
(use-package pkgbuild-mode
  :mode
  (("/PKGBUILD/" . pkgbuild-mode)))
    #+end_src

*** Protocol Buffer

    #+begin_src emacs-lisp
(use-package protobuf-mode)
    #+end_src

*** Toml

    #+begin_src emacs-lisp
(use-package toml-mode)
    #+end_src

*** YAML

    Apparently whitespace matters in yaml files, especially the ones that get parsed for documentation (for tricks
    like newline in a markdown, you have 2 trailing spaces), hence the hook.

    #+begin_src emacs-lisp
(use-package yaml-mode
  :bind
  (:map yaml-mode-map
        ("C-x C-s" . shan/vanilla-save)))

(use-package flycheck-yamllint
  :hook
  (flycheck-mode . flycheck-yamllint-setup))
    #+end_src

** Containers

*** TODO [#B] Docker

    Figure this out

    #+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode
  (("Dockerfile'"       . dockerfile-mode)
   ("\\.Dockerfile\\'"  . dockerfile-mode))
  :init
  (shan/copy-hooks-to text-mode-hook 'dockerfile-mode-hook))

;; Emacs interface to docker
(use-package docker)
    #+end_src

*** TODO [#D] Kubernetes

    k8s stuff

    #+begin_src emacs-lisp
(use-package kubernetes
  :commands
  (kubernetes-overview))
    #+end_src

** TODO Databases

*** GraphQL

    #+begin_src emacs-lisp
(use-package graphql)

(use-package graphql-mode
  :mode
  (("\\.\\(gql\\|graphql\\)\\'" . graphql-mode))
  :config
  (defun shan/set-graphql-url()
    (interactive)
    (let ((shan/user-input '("http://localhost:8000/api/graphql/query"
                             "http://localhost:3000" "Manual")))
      (ivy-read "Set graphql url: " shan/user-input
                :action #'(lambda(arg)
                            (setq graphql-url (if (string= arg "Manual")
                                                  (read-string "Enter graphql url:") arg)))
                :caller 'shan/set-graphql-url))))
    #+end_src

*** SQL

    #+begin_src emacs-lisp
(use-package sql
  :mode
  (("\\.\\(sql\\|psql\\|hql\\|mysql\\|q\\)\\'" . sql-mode))
  :hook
  (sql-mode . (lambda ()
                (sql-highlight-mysql-keywords))))

(use-package sql-indent
  :init
  (setq-default sql-indent-offset tab-width))
    #+end_src
