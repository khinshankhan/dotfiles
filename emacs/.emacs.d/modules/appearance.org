#+STARTUP: overview
#+PRIORITIES: A D B

** GUI

   You need to experience keyboard to realize keyboard master race. (fn + f10 if need be for options though)

   #+begin_src emacs-lisp
(setq inhibit-startup-message t)
(dolist (fn '(tool-bar-mode scroll-bar-mode menu-bar-mode))
  (if (fboundp fn)
      (funcall fn -1)))
   #+end_src

** Font

   #+begin_src emacs-lisp
(when (member "Source Code Pro" (font-family-list))
  (set-face-attribute 'default nil
                      :family "Source Code Pro"
                      :weight 'normal
                      :width 'normal))

(add-to-list 'face-ignored-fonts "Noto Color Emoji")

(when (member "Symbola" (font-family-list))
  (set-fontset-font t 'unicode "Symbola" nil 'prepend))
   #+end_src

** Theme

   Doom themes are best esp since I use Doom modeline. Also, Doom Dracula just has better keyword support as far as
   I've seen. It's also just easy on my eyes.

   #+begin_src emacs-lisp
(use-package doom-themes
  :demand t
  :config
  (setq doom-vibrant-brighter-comments t
        doom-vibrant-brighter-modeline t)
  (doom-themes-org-config)
  (load-theme 'doom-dracula t))
   #+end_src

   The dark nights sometimes need a little sun. The slight brightness is nice for the eyes.

   #+begin_src emacs-lisp
(use-package solaire-mode
  :demand t
  :functions persp-load-state-from-file
  :hook
  (prog-mode . turn-on-solaire-mode)
  (minibuffer-setup . solaire-mode-in-minibuffer)
  (after-load-theme . solaire-mode-swap-bg)
  :config
  (setq solaire-mode-remap-modeline nil
        solaire-mode-remap-fringe nil)
  (solaire-global-mode 1)
  (solaire-mode-swap-bg)
  (advice-add #'persp-load-state-from-file
              :after #'solaire-mode-restore-persp-mode-buffers))
   #+end_src

** Mode Line

   Definitely needed, or else you'd never know where you are.

   #+begin_src emacs-lisp
(dolist (fn '(line-number-mode column-number-mode))
  (if (fboundp fn)
      (funcall fn t)))
   #+end_src

   The cleanest modeline I've ever used.

   #+begin_src emacs-lisp
(use-package doom-modeline
  :demand t
  :config
  (setq doom-modeline-python-executable shan/python-executable
        doom-modeline-icon t
        doom-modeline-major-mode-icon t
        doom-modeline-version t
        doom-modeline-buffer-file-name-style 'file-name)
  (doom-modeline-mode))
   #+end_src

   These modes don't need a modeline. I'd prefer to get it out of a debugging buffers too though. Sometimes I just
   toggle it off to focus...

   #+begin_src emacs-lisp
(use-package hide-mode-line
  :hook
  ((neotree-mode
    imenu-list-minor-mode
    minimap-mode ibuffer-mode
    help-mode
    deft-text-mode
    Man-mode)
   . hide-mode-line-mode))
   #+end_src

** Zoom

*** Font Size Zooming

    Increases the font in all buffers, great for when I have to use external monitors or present.

    #+begin_src emacs-lisp
(use-package default-text-scale
  :init
  (default-text-scale-mode))
    #+end_src

*** Single Window Focus Zooming

    Useful for zero-ing in on a file for a bit, but keeping the rest of the setup.

    #+begin_src emacs-lisp
(use-package zoom-window
  :bind
  ("C-z" . zoom-window-zoom))
    #+end_src

** Interface

*** Bells

    Okay, these bells are annoying, but emacspeak has me doubting my initial impressions.

    #+begin_src emacs-lisp
(setq-default visible-bell nil
              audible-bell nil
              ring-bell-function 'ignore)
    #+end_src

*** Confirmation Messages

    Who types a whole =yes= intead of =y= nowadays..?

    #+begin_src emacs-lisp
(defalias 'yes-or-no-p (lambda (&rest _) t))
(setq-default confirm-kill-emacs nil)
(setq save-abbrevs t)
(setq-default abbrev-mode t)
(setq save-abbrevs 'silently)
    #+end_src

*** Lines

    #+begin_src emacs-lisp
(setq-default transient-mark-mode t
              visual-line-mode t
              indent-tabs-mode nil
              tab-width 4)

;; highlights the line containing mark
(if (fboundp 'global-hl-line-mode)
    (global-hl-line-mode t))
    #+end_src

*** Scratch Buffer

    I like my scratch buffers to be lisp and empty, thought I could always use =M-x language-mode= to change the
    language. It's pretty useful for quick tests, though org mode is becoming increasingly easier to use, may
    change initial scratch mode to that.

    #+begin_src emacs-lisp
(setq-default initial-major-mode 'lisp-interaction-mode)
(setq initial-scratch-message nil)
    #+end_src

** Splash Screen

   #+begin_src emacs-lisp
(use-package page-break-lines)

(use-package dashboard
  :demand t
  :bind
  (:map dashboard-mode-map
        ("n" . widget-forward)
        ("p" . widget-backward)
        ("f" . shan/elfeed-update-database))
  :custom
  (dashboard-banner-logo-title
   (format ""
           (float-time (time-subtract after-init-time before-init-time))
           gcs-done))
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-init-info t)
  (dashboard-center-content t)
  (dashboard-set-footer nil)

  (dashboard-set-navigator t)
  (dashboard-navigator-buttons
   `((

      (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
       ""
       "GH Repos"
       (lambda (&rest _) (browse-url "https://github.com/kkhan01?tab=repositories")))

      (,(all-the-icons-material "update" :height 1.2 :v-adjust -0.24)
       ""
       "Update emacs"
       (lambda (&rest _) (shan/elfeed-update-database)))

      (,(all-the-icons-material "autorenew" :height 1.2 :v-adjust -0.15)
       ""
       "Restart emacs"
       (lambda (&rest _) (shan/reload)))

      )))

  :config
  (setq dashboard-items '((recents  . 5)
                          ;; (bookmarks . 5)
                          ;; (projects . 5)
                          (agenda . 5)
                          ;; (registers . 5)
                          ))

  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner (if shan--settings-exist?
                                     shan--preferred-logo ;; weird stuff, possibly because of no-littering
                                   'logo))

  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
   #+end_src

** TODO [#B] Neotree

   I dont usually use gui, but this seemed fun. Used [[https://github.com/Ladicle][Ladicle]]'s config.

   [ ] Until we figure out treemacs.

   #+begin_src emacs-lisp
(use-package neotree
  :after
  (projectile)
  :commands
  (neotree-show neotree-hide neotree-dir neotree-find)
  :init
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  :custom
  (neo-theme 'nerd2)
  (neo-window-position 'left)
  :bind
  ([f8] . neotree-current-dir-toggle)
  ([f9] . neotree-projectile-toggle)
  :preface
  (defun neotree-projectile-toggle ()
    (interactive)
    (let ((project-dir
           (ignore-errors
           ;;; Pick one: projectile or find-file-in-project
             (projectile-project-root)
             ))
          (file-name (buffer-file-name))
          (neo-smart-open t))
      (if (and (fboundp 'neo-global--window-exists-p)
               (neo-global--window-exists-p))
          (neotree-hide)
        (progn
          (neotree-show)
          (if project-dir
              (neotree-dir project-dir))
          (if file-name
              (neotree-find file-name))))))

  (defun neotree-current-dir-toggle ()
    (interactive)
    (let ((project-dir
           (ignore-errors
             (ffip-project-root)
             ))
          (file-name (buffer-file-name))
          (neo-smart-open t))
      (if (and (fboundp 'neo-global--window-exists-p)
               (neo-global--window-exists-p))
          (neotree-hide)
        (progn
          (neotree-show)
          (if project-dir
              (neotree-dir project-dir))
          (if file-name
              (neotree-find file-name)))))))
   #+end_src

** UI

   Heavy motivation from Doom Emacs

*** Scrolling

    #+begin_src emacs-lisp
(setq-default hscroll-margin 2
              hscroll-step 1
              scroll-margin 0
              scroll-conservatively 10000
              scroll-preserve-screen-position t
              auto-window-vscroll nil
              mouse-wheel-scroll-amount '(5 ((shift) . 2))
              mouse-wheel-progressive-speed nil)

(remove-hook 'eshell-mode-hook 'hscroll-margin t)
(remove-hook 'term-mode-hook 'hscroll-margin t)
    #+end_src

*** Cursor

    #+begin_src emacs-lisp
(if (fboundp 'blink-cursor-mode)
    (blink-cursor-mode 0))

(setq-default blink-matching-paren nil
              visible-cursor nil
              x-stretch-cursor nil
              cursor-type 'box)
    #+end_src

    #+begin_src emacs-lisp
(use-package beacon
  :hook
  (focus-in . beacon-blink)
  :config
  (beacon-mode))
    #+end_src
